#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import socket
import os
import time
import traceback
import sys
import datetime
import subprocess
import re
import argparse

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def dontptimecheck(protocol,hostname,warning,critical,timeoutvalue,timeoutstatus):
    retries = 3
    counter = 0
    while True:
        infomsg("executing retry "+str(counter))
        counter = counter+1
        command = ["/usr/lib/nagios/plugins/check_ntp_time",protocol,"-H",hostname,"-w",warning,"-c",critical,"-t",str(10)]
        infomsg(" ".join(command))
        result = subprocess.run(command,capture_output=True)
        exitcode = result.returncode
        output = result.stdout.decode("utf-8").rstrip()
        errors = result.stderr.decode("utf-8").rstrip()

        if output.endswith("No response from NTP server"):
            if counter>retries:
                exitnagios(timeoutstatus,output+"\n"+errors)
            else:
                infomsg("sleeping for retry "+str(counter))
                time.sleep(10)
        else:
            if exitcode==0:
                originalstatus = "OK"
            elif exitcode==1:
                originalstatus = "WARNING"
            elif exitcode==2:
                originalstatus = "CRITICAL"
            elif exitcode==3:
                originalstatus = "UNKNOWN"
            else:
                originalstatus = ""
            exitnagios(originalstatus,output+"\n"+errors)

#-------------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-4", "--ipv4",           action="store_true",  dest="ipv4",          default=False,         help="use ipv4 (default, exclusive with ipv6)")
    parser.add_argument("-6", "--ipv6",           action="store_true",  dest="ipv6",          default=False,         help="use ipv6 (exclusive with ipv4)")
    parser.add_argument("-H", "--hostname",                             dest="hostname",      default="",            help="server to check")
    parser.add_argument("-w", "--warning",                              dest="warning",       default=None,          help="Warning level")
    parser.add_argument("-c", "--critical",                             dest="critical",      default=None,          help="Critical level")
    parser.add_argument("-t", "--timeout",                              dest="timeout",       default="30:CRITICAL", help="timeout value:STATUS")
    args = parser.parse_args()

    if (args.ipv4 == True) and (args.ipv6 == True):
        exitnagios("CRITICAL","choose ipv4 or ipv6, not both")
    if (args.ipv4 == False) and (args.ipv6 == False):
        args.ipv4 = True
    #infomsg(args.ipv4)
    #infomsg(args.ipv6)

    if (args.hostname == ""):
        exitnagios("CRITICAL","hostname not defined")

    protocol = ""
    if args.ipv4 == True :
        protocol = "-4"
    elif args.ipv6 == True :
        protocol = "-6"

    parts = args.timeout.split(":")
    timeoutvalue = int(parts[0])
    if len(parts)>1:
        timeoutstatus = parts[1]
    else:
        timeoutstatus = "CRITICAL"
    if timeoutstatus in ["OK", "WARNING", "CRITICAL", "UNKNOWN"]:
        dontptimecheck(protocol,args.hostname,args.warning,args.critical,timeoutvalue,timeoutstatus)
    else:
        exitnagios("CRITICAL","timeout status is not valid")

main()

#-------------------------------------------------------------------------------
