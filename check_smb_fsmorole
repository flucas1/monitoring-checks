#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import os
import sys
import io
import socket
import subprocess
import argparse

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def getroles():
    cmdline = ["/usr/bin/samba-tool","fsmo","show"]
    infomsg(" ".join(cmdline))
    completedproc = subprocess.run(cmdline,capture_output=True)
    output = completedproc.stdout.decode()
    errors = completedproc.stderr.decode()
    if completedproc.returncode != 0:
        print(output, flush=True)
        print(errors, flush=True)
        return []
    else:
        rows = output.split("\n")
        return rows

def extractmaster(role, lines):
    for line in lines:
        if line.startswith(role):
            return "CONTROLLER"
    return ""

#-------------------------------------------------------------------------------

def parse_args(forcedargs=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("-m", "--master",                                  dest="master",           default="",                                   help="expected Master for all roles")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args(forcedargs)
    return args

def main(forcedargs=None):
    args = parse_args(forcedargs)

    setcandebug(args.debug)

    if (args.master == ""):
        exitnagios("CRITICAL","expected master was not defined!")

    roles = getroles()
    SchemaMasterRole         = extractmaster("SchemaMasterRole",         roles)
    InfrastructureMasterRole = extractmaster("InfrastructureMasterRole", roles)
    RidAllocationMasterRole  = extractmaster("RidAllocationMasterRole",  roles)
    PdcEmulationMasterRole   = extractmaster("PdcEmulationMasterRole",   roles)
    DomainNamingMasterRole   = extractmaster("DomainNamingMasterRole",   roles)
    DomainDnsZonesMasterRole = extractmaster("DomainDnsZonesMasterRole", roles)
    ForestDnsZonesMasterRole = extractmaster("ForestDnsZonesMasterRole", roles)

    if ( (SchemaMasterRole         == args.master) and
         (InfrastructureMasterRole == args.master) and
         (RidAllocationMasterRole  == args.master) and
         (PdcEmulationMasterRole   == args.master) and
         (DomainNamingMasterRole   == args.master) and
         (DomainDnsZonesMasterRole == args.master) and
         (ForestDnsZonesMasterRole == args.master) ):
        exitnagios("OK","All FSMO roles are "+args.master)
    else:
        exitnagios("CRITICAL","not all FSMO roles are not matching "+args.master+" -- "+" -- ".join(roles))

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
