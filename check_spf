#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import os
import sys
import time
import subprocess
import argparse

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver import ActionChains

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def generatedriver(proxy):
    chrome_options = Options()
    chrome_options.add_argument("--incognito")
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--in-process-gpu")
    chrome_options.add_argument("--use-gl=angle")
    chrome_options.add_argument("--use-angle=swiftshader-webgl")
    chrome_options.add_argument("--proxy-server="+proxy)

    chrome_service = webdriver.ChromeService(executable_path="/usr/bin/chromedriver")

    driver = webdriver.Chrome(options=chrome_options,service=chrome_service)
    #driver.implicitly_Wait(10, TimeUnit.SECONDS)

    return driver

def check_page_loaded(driver):
    #self.log.info("Checking if {} page is loaded.".format(self.driver.current_url))
    page_state = driver.execute_script("return document.readyState;")
    return page_state == "complete"

def wait_page_loaded(driver):
    timestamp = time.time()
    while True:
        if check_page_loaded(driver) == True:
            break
        if time.time() - timestamp > 20:
            break

#-------------------------------------------------------------------------------

def tryfindbyxpath(driver,xpath):
    result = []
    try:
        result = driver.find_elements(By.XPATH, xpath)
    except:
        pass
    return result

def tryfindbyid(driver,idname):
    result = []
    try:
        result = driver.find_elements(By.ID, idname)
    except:
        pass
    return result

def tryfindbyclassname(driver,classname):
    result = []
    try:
        result = driver.find_elements(By.CLASS_NAME, classname)
    except:
        pass
    return result

#-------------------------------------------------------------------------------

def dodnssecverisigncall(domain,proxy):
    try:
        driver = generatedriver(proxy)

        wait = WebDriverWait(driver,20)
        action=ActionChains(driver)

        infomsg("browser OK")
        url = "https://app.dmarcanalyzer.com/dns/spf?domain="+domain
        driver.get(url)
        infomsg("asking for navigating "+url)

        time.sleep(5)
        wait_page_loaded(driver)
        infomsg("page loaded")

        infomsg("waiting for element")
        wait.until(EC.presence_of_element_located((By.ID, "dns-results")))

        infomsg("finding base element")
        element = tryfindbyclassname(driver,"panel-body")
        if len(element)==0:
            exitnagios("CRITICAL","no result from page")

        infomsg("finding error message")
        wellsmlist = tryfindbyclassname(driver,"well-sm")
        messages = []
        isValid = False
        isWarning = False
        isError = False
        for wellsmelem in wellsmlist:
            classes = wellsmelem.get_attribute("class").split()
            status = wellsmelem.text.strip()
            messages.append(status)
            if "text-success" in classes:
                isValid = True
            if "text-warning" in classes:
                if status not in ["Warning : You shouldn't use PTR lookups as they are deprecated"]:
                    isWarning = True
            if "text-danger" in classes:
                isError = True
        if isError:
            exitnagios("CRITICAL"," -- ".join(messages))
        elif isWarning:
            exitnagios("WARNING"," -- ".join(messages))
        elif isValid:
            exitnagios("OK"," -- ".join(messages))
        else:
            exitnagios("CRITICAL"," -- ".join(messages))

    except Exception as e:
        exitnagios("CRITICAL","unexpected error during the check "+str(e))

#-------------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-H', '--host',                                    dest="host",                                                           help="Hostname")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args()

    setcandebug(args.debug)

    proxy = ""
    dodnssecverisigncall(args.host,proxy)

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------