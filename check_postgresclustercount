#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import argparse
import sys
import os
import subprocess
import platform

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def mapstatustoexitcode(status):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    return exitcode

def exitnagios(status,message):
    exitcode = mapstatustoexitcode(status)
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def dopostgresclustercountcall(expected):
    cmdline = ["/usr/bin/pg_lsclusters","--no-header"]
    completedproc = subprocess.run(cmdline,capture_output=True)
    output = completedproc.stdout.decode("utf-8").strip()
    errors = completedproc.stderr.decode("utf-8").strip()
    exitcode = completedproc.returncode

    if exitcode == 0:
        lines = output.splitlines()
        found = len(lines)
        if found==expected:
            exitnagios("OK","there are "+str(found)+" postgres clusters as expected | count="+str(found))
        else:
            exitnagios("CRITICAL","there are "+str(found)+" postgres clusters, but it was expected to find "+str(expected)+" - "+str(lines)+" | count="+str(found))
    else:
        exitnagios("CRITICAL","issue retrieving the list of postgres clusters | count=-1")

#-------------------------------------------------------------------------------

def main(forcedargs=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("-e", "--expected",                                dest="expected",         default="1",                                  help="expected")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args(forcedargs)

    setcandebug(args.debug)

    expected = int(args.expected)
    dopostgresclustercountcall(expected)

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
