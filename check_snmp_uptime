#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import argparse
import sys
import re
import subprocess
import datetime

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

original_getaddrinfo = socket.getaddrinfo

def forced_ipv6_gai_family(*args, **kwargs):
    global original_getaddrinfo
    responses = original_getaddrinfo(*args, **kwargs)
    return [response
            for response in responses
            if response[0] == socket.AF_INET]

def forced_ipv4_gai_family(*args, **kwargs):
    global original_getaddrinfo
    responses = original_getaddrinfo(*args, **kwargs)
    return [response
            for response in responses
            if response[0] == socket.AF_INET6]

#-------------------------------------------------------------------------------

def dosnmpuptimecall(warningmin, criticalmin, warningmax, criticalmax, hostname, port, community, timeoutvalue, timeoutstatus):
    alternatives = {}
    alternatives["engine"   ] = (".1.3.6.1.6.3.10.2.1.3.0","INTEGER:\W*(\d+)\W*seconds",1   )
    alternatives["sysUptime"] = (".1.3.6.1.2.1.1.3.0",     "Timeticks:\W*\((\d+)\)\W*", 0.01)

    uptime_min = None
    method = None
    for key,value in alternatives.items():
        oid,search,factor = value
        mycode, stdout = snmpget(hostname, port, community, oid)
        if mycode==None:
            exitnagios(timeoutstatus,"Timeout")
        elif mycode==0:
            match = re.search(search, stdout)
            if match:
                uptime_sec = float(int(match.group(1)) * factor)
                uptime_min = float(uptime_sec/60)
                method = key
                break

    if method == None:
        exitnagios("CRITICAL","Unable to determine uptime")

    fractionaldays= uptime_sec / (3600*24)
    if (criticalmin != "") and (uptime_min < float(criticalmin)):
        exitnagios("CRITICAL","Uptime less than "+str(datetime.timedelta(minutes=float(criticalmin)))+" - currently "+str(datetime.timedelta(minutes=uptime_min))+" (SNMP method: "+method+") | uptime="+str(fractionaldays))
    elif (warningmin != "") and (uptime_min < float(warningmin)):
        exitnagios("WARNING","Uptime less than "+str(datetime.timedelta(minutes=float(warningmin)))+" - currently "+str(datetime.timedelta(minutes=uptime_min))+" (SNMP method: "+method+") | uptime="+str(fractionaldays))
    elif (criticalmax != "") and (uptime_min > float(criticalmax)):
        exitnagios("CRITICAL","Uptime more than "+str(datetime.timedelta(minutes=float(criticalmax)))+" - currently "+str(datetime.timedelta(minutes=uptime_min))+" (SNMP method: "+method+") | uptime="+str(fractionaldays))
    elif (warningmax != "") and (uptime_min > float(warningmax)):
        exitnagios("WARNING","Uptime more than "+str(datetime.timedelta(minutes=float(warningmax)))+" - currently "+str(datetime.timedelta(minutes=uptime_min))+" (SNMP method: "+method+") | uptime="+str(fractionaldays))
    else:
        exitnagios("OK","The uptime is "+str(datetime.timedelta(minutes=uptime_min))+" - (SNMP method: "+method+") | uptime="+str(fractionaldays))


def snmpget(hostname, port, community, oid):
    cmdline = ["/usr/bin/snmpget","-v","2c","-c",community,hostname+":"+str(port),oid]
    completedproc = subprocess.run(cmdline,capture_output=True)
    output = completedproc.stdout.decode("utf-8").strip()
    errors = completedproc.stderr.decode("utf-8").strip()
    exitcode = completedproc.returncode
    if errors.startswith("Timeout: No Response from "):
        exitcode = None
        output = None

    return (exitcode, output)

#-------------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-4", "--ipv4",              action="store_true",  dest="ipv4",             default=False,                                help="use ipv4 (exclusive with ipv6)")
    parser.add_argument("-6", "--ipv6",              action="store_true",  dest="ipv6",             default=False,                                help="use ipv6 (exclusive with ipv4)")
    parser.add_argument("-0", "--ipv0",              action="store_true",  dest="ipv0",             default=False,                                help="do not specify ip protocol version")
    parser.add_argument("-H", "--hostname",                                dest="hostname",         default="",                                   help="server to check")
    parser.add_argument("-p", "--port",                                    dest="port",             default=161,                                  help="port to use, usually 143 or 993")
    parser.add_argument("-t", "--timeout",                                 dest="timeout",          default="30:CRITICAL",                        help="timeout value:STATUS")
    parser.add_argument("-m", "--community",                               dest="community",        default="public",                             help="private/public")
    parser.add_argument("-w", "--warning-min",                             dest="warningmin",       default="",                                   help="minimun value for a warning (minutes)")
    parser.add_argument("-c", "--critical-min",                            dest="criticalmin",      default="",                                   help="maximun value for a critical (minutes)")
    parser.add_argument("-W", "--warning-max",                             dest="warningmax",       default="",                                   help="minimun value for a warning (minutes)")
    parser.add_argument("-C", "--critical-max",                            dest="criticalmax",      default="",                                   help="maximun value for a critical (minutes)")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args()

    setcandebug(args.debug)

    protocol = None
    exclist = 0
    if args.ipv0 == True :
        protocol = ""
        exclist = exclist+1
    if args.ipv4 == True :
        protocol = "-4"
        exclist = exclist+1
        socket.getaddrinfo = forced_ipv4_gai_family
    if args.ipv6 == True :
        protocol = "-6"
        exclist = exclist+1
        socket.getaddrinfo = forced_ipv6_gai_family
    if (exclist>1) :
        exitnagios("CRITICAL","select ip protocol version 4 or 6, or 0 to relay on OS handling")
    elif (exclist<1) :
        exitnagios("CRITICAL","no protocol selected")

    if args.hostname == "":
        exitnagios("CRITICAL","no hostname specified")

    parts = args.timeout.split(":")
    timeoutvalue = int(parts[0])
    if len(parts)>1:
        timeoutstatus = parts[1]
    else:
        timeoutstatus = "CRITICAL"
    if timeoutstatus in ["OK", "WARNING", "CRITICAL", "UNKNOWN"]:
        dosnmpuptimecall(args.warningmin,args.criticalmin,args.warningmax,args.criticalmax,args.hostname,int(args.port),args.community,timeoutvalue,timeoutstatus)
    else:
        exitnagios("CRITICAL","timeout status is not valid")

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------

#timeout
#warning