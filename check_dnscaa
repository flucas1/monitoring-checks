#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import os
import sys
import subprocess
import argparse
import mechanize
from bs4 import BeautifulSoup

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def dotorcall(protocol,domain):
    try:
        url = "https://caatest.co.uk/"+domain
        br = mechanize.Browser()
        br.set_handle_robots(False) # ignore robots file
        #br.addheaders = [('User-agent', 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)')]
        br.addheaders = [('User-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0')]
        res = br.open(url)
        content = res.read()
        if content == None:
            exitnagios("CRITICAL","no result from page")

        soup = BeautifulSoup(content, "html.parser")

        element = soup.find("span",class_="success green")
        if element!=None:
            exitnagios("OK","the domain has valid CAA records")
        else:
            exitnagios("CRITICAL","the domain has issues with the CAA records")

    except Exception as e:
        exitnagios("CRITICAL","unexpected error during the check "+str(e))

#-------------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-4", "--ipv4",              action="store_true",  dest="ipv4",             default=False,                                help="use ipv4 (default, exclusive with ipv6)")
    parser.add_argument("-6", "--ipv6",              action="store_true",  dest="ipv6",             default=False,                                help="use ipv6 (exclusive with ipv4)")
    parser.add_argument("-0", "--ipv0",              action="store_true",  dest="ipv0",             default=False,                                help="do not specify ip protocol version")
    parser.add_argument('-H', '--host',                                    dest="host",                                                           help="Hostname")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args()
    
    setcandebug(args.debug)

    protocol = None
    exclist = 0
    if args.ipv0 == True :
        protocol = ""
        exclist = exclist+1
    if args.ipv4 == True :
        protocol = "-4"
        exclist = exclist+1
        socket.getaddrinfo = forced_ipv4_gai_family
    if args.ipv6 == True :
        protocol = "-6"
        exclist = exclist+1
        socket.getaddrinfo = forced_ipv6_gai_family
    if (exclist>1) :
        exitnagios("CRITICAL","select ip protocol version 4 or 6, or 0 to relay on OS handling")
    elif (exclist<1) :
        exitnagios("CRITICAL","no protocol selected")

    if (args.host == ""):
        exitnagios("CRITICAL","specify a host/domain to check")
    
    dotorcall(protocol,args.host)

if __name__ == '__main__':
    main()

#-------------------------------------------------------------------------------