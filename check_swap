#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import argparse
import sys
import os
import subprocess
import datetime
import dateutil.parser

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def mapstatustoexitcode(status):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    return exitcode

def exitnagios(status,message):
    exitcode = mapstatustoexitcode(status)
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def dofreeswapscall(warning,critical,minimun):
    cmdline = ["/usr/bin/free","--mega","--wide"]
    completedproc = subprocess.run(cmdline,capture_output=True)
    output = completedproc.stdout.decode("utf-8").strip()
    errors = completedproc.stderr.decode("utf-8").strip()
    exitcode = completedproc.returncode

    infomsg(output)
    if exitcode == 0:
        lines = output.splitlines()
        hasswap = False
        total = 0
        free = 0
        if len(lines)>1:
            lines.pop(0)
            for line in lines:
                parts = line.split()
                if parts[0]=="Swap:":
                    infomsg(parts)
                    hasswap = True
                    total = total+int(parts[1])
                    free = free+int(parts[3])

        if not hasswap:
            exitnagios("CRITICAL","no swap detected")
        else:
            usage = free/total
            if minimun!="" and total<float(minimun):
                exitnagios("CRITICAL","swap is too small")
            elif critical!="" and usage>float(critical):
                exitnagios("CRITICAL","swap is used at "+str(round(usage,2))+"% | percent="+str(usage))
            elif warning!="" and usage>float(warning):
                exitnagios("WARNING","swap is used at "+str(round(usage,2))+"% | percent="+str(usage))
            else:
                exitnagios("OK","swap is used at "+str(round(usage,2))+"% | percent="+str(usage))
    else:
        exitnagios("CRITICAL","issue retrieving free swap")

#-------------------------------------------------------------------------------

def main(forcedargs=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("-w", "--warning",                                 dest="warning",          default="",                                   help="warning level %")
    parser.add_argument("-c", "--critical",                                dest="critical",         default="",                                   help="critical level %")
    parser.add_argument("-m", "--minimun",                                 dest="minimun",          default="",                                   help="minimun size MB")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args(forcedargs)

    setcandebug(args.debug)

    dofreeswapscall(args.warning,args.critical,args.minimun)

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
