#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import sys
from samba.param import LoadParm
from samba.credentials import Credentials
from samba.netcmd.drs import drsuapi_connect, drs_parse_ntds_dn
from samba.netcmd.common import netcmd_dnsname
from samba.dcerpc import drsuapi

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

NAGIOS_STATE_OK = 0
NAGIOS_STATE_WARNING = 1
NAGIOS_STATE_CRITICAL = 2
NAGIOS_STATE_UNKNOWN = 3


class CheckSambaDrsRepl(object):

	def __init__(self):
		self.lp = LoadParm()
		self.lp.load_default()
		self.creds = Credentials()
		self.creds.guess(self.lp)
		self.creds.set_machine_account(self.lp)
		self.server = netcmd_dnsname(self.lp)

	def check(self):
		consecutive_sync_failures = dict()
		failures = False
		msg = None
		drsuapi_connect(self)
		req1 = drsuapi.DsReplicaGetInfoRequest1()
		req1.info_type = drsuapi.DRSUAPI_DS_REPLICA_INFO_REPSTO
		(info_type, info) = self.drsuapi.DsReplicaGetInfo(self.drsuapi_handle, 1, req1)
		for n in info.array:
			if n.consecutive_sync_failures > 0:
				failures = True
				(site, server) = drs_parse_ntds_dn(n.source_dsa_obj_dn)
				if server not in consecutive_sync_failures:
					consecutive_sync_failures[server] = 0
				consecutive_sync_failures[server] += n.consecutive_sync_failures
		for server in consecutive_sync_failures:
			text = '%s failures on %s' % (consecutive_sync_failures[server], server)
			msg = msg + ', ' + text if msg else text
		return (failures, msg)


def nagios_exit(state, msg):
	if state == NAGIOS_STATE_OK:
		print('Samba DRS OK: %s' % msg, flush=True)
		sys.exit(NAGIOS_STATE_OK)
	elif state == NAGIOS_STATE_WARNING:
		print('Samba DRS WARNING: %s' % msg, flush=True)
		sys.exit(NAGIOS_STATE_WARNING)
	elif state == NAGIOS_STATE_CRITICAL:
		print('Samba DRS CRITICAL: %s' % msg, flush=True)
		sys.exit(NAGIOS_STATE_CRITICAL)
	else:
		print('Samba DRS UNKNOWN: %s' % msg, flush=True)
		sys.exit(NAGIOS_STATE_UNKNOWN)


if __name__ == '__main__':

	try:
		(failures, msg) = CheckSambaDrsRepl().check()
	except RuntimeError as error:
		nagios_exit(NAGIOS_STATE_CRITICAL, error)
	except Exception as ex:
		nagios_exit(NAGIOS_STATE_CRITICAL, ex.message)

	if failures:
		nagios_exit(NAGIOS_STATE_CRITICAL, msg)

	nagios_exit(NAGIOS_STATE_OK, 'no drs failures')
