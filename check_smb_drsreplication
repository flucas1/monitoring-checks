#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import sys
from samba.param import LoadParm
from samba.credentials import Credentials
from samba.netcmd.drs import drsuapi_connect, drs_parse_ntds_dn
from samba.netcmd.common import netcmd_dnsname
from samba.dcerpc import drsuapi

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def mapstatustoexitcode(status):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    return exitcode

def exitnagios(status,message):
    exitcode = mapstatustoexitcode(status)
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def dosmbreplicationcall():
    failures = False
    msg = ""
    try:
        lp = LoadParm()
        lp.load_default()
        creds = Credentials()
        creds.guess(lp)
        creds.set_machine_account(lp)
        server = netcmd_dnsname(lp)

        consecutive_sync_failures = dict()
        drsuapi_connect(self)
        req1 = drsuapi.DsReplicaGetInfoRequest1()
        req1.info_type = drsuapi.DRSUAPI_DS_REPLICA_INFO_REPSTO
        (info_type, info) = drsuapi.DsReplicaGetInfo(drsuapi_handle, 1, req1)
        for n in info.array:
            if n.consecutive_sync_failures > 0:
                failures = True
                (site, server) = drs_parse_ntds_dn(n.source_dsa_obj_dn)
                if server not in consecutive_sync_failures:
                    consecutive_sync_failures[server] = 0
                consecutive_sync_failures[server] += n.consecutive_sync_failures
        for server in consecutive_sync_failures:
            text = "%s failures on %s" % (consecutive_sync_failures[server], server)
            msg = msg + ", " + text if msg else text
    except RuntimeError as error:
        exitnagios("CRITICAL", error)
    except Exception as ex:
        exitnagios("CRITICAL", ex.message)

    if failures:
        exitnagios("CRITICAL", msg)
    else:
        exitnagios("OK", "no drs failures")

#-------------------------------------------------------------------------------

def parse_args(forcedargs=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args(forcedargs)
    return args

def main(forcedargs=None):
    args = parse_args(forcedargs)
    setcandebug(args.debug)
    dosmbreplicationcall()

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
