#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import argparse
import sys
import os
import subprocess
import platform
import json

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def oom_check(criticallevel, warninglevel, short=False, verbose=False):
    cmdline = ["/usr/bin/journalctl","--utc","--no-pager","-kq","-o","json","-b","-0","--output-fields=MESSAGE"]
    #print(cmdline, flush=True)
    completedproc = subprocess.run(cmdline,capture_output=True)
    output = completedproc.stdout.decode("utf-8").strip()
    errors = completedproc.stderr.decode("utf-8").strip()
    exitcode = completedproc.returncode

    #print(output, flush=True)
    if exitcode==0:
        counter=0
        for line in output.splitlines():
            parsed = json.loads(line)
            #print(parsed, flush=True)
            if "killed process" in parsed["MESSAGE"]:
                counter = counter+1

        if criticallevel!="" and counter > int(criticallevel):
            exitnagios("CRITICAL",str(counter)+" processes was killed by OOM")
        elif warninglevel!="" and counter > int(warninglevel):
            exitnagios("WARNING",str(counter)+" processes was killed by OOM")
        else:
            exitnagios("OK","No OOM killer activity found in journalctl")
    else:
        exitnagios("CRITICAL","error retrieving the information from journalctl")

#-------------------------------------------------------------------------------

def main():
    argp = argparse.ArgumentParser(add_help=True, description="Check for OOM killer events")
    argp.add_argument("-w", "--warning",  default="",          help="Number of occurences to trigger a warning")
    argp.add_argument("-c", "--critical", default="1",         help="Number of occurences to trigger a warning")
    argp.add_argument("-s", "--short",    action="store_true", help="If this option is specified, check ignores dmesg OOM problems older then 24 hours")
    argp.add_argument("-v", "--verbose",  action="store_true", help="Show verbose output from demsg about OOM killer events")
    args = argp.parse_args()

    oom_check(args.warning, args.critical, args.short, args.verbose)


if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------