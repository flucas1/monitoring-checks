#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import os
import sys
import subprocess
import re
import argparse

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def checkgetent(database, key, value, partial):
    command = ['/usr/bin/getent', database]
    infomsg(line)
    infomsg(" ".join(command))
    output = ""
    try:
        result = subprocess.check_output(command)
        output = result.decode('utf-8')
    except Exception as e:
        infomsg("CRITICAL: exception during getent call")
        return False

    if output == None:
        infomsg("CRITICAL: no output from getent")
        return False
    else:
        lines = output.splitlines()
        isok = False
        found = False
        for line in lines:
            infomsg(line)
            if  line.startswith(key+":"):
                found = True
                if ((value==None) or (value=="")):
                    infomsg("OK: found key and no expected value was set - "+line)
                    isok = True
                elif (line == key+value):
                    infomsg("OK: found fully matching expected line "+line)
                    isok = True
                elif partial and (line.startswith(key+value)):
                    infomsg("OK: found partial match with expected line "+line)
                    isok = True
                else:
                    infomsg("CRITICAL: found unexpected line "+line+" but it was expected "+key+value)
                break
        if found == False:
            infomsg("CRITICAL: key not found "+key)
        return isok

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--database",                                dest="database",                                                 help="database to use (passwod, group, ...)")
    parser.add_argument("-k", "--key",                                     dest="key",                                                      help="key to search")
    parser.add_argument("-l", "--value",                                   dest="value",            default=None,                           help="expected value")
    parser.add_argument("-p", "--partial",           action="store_true",  dest="partial",          default=False,                          help="is partial match")
    parser.add_argument("-w", "--warning",           action="store_false", dest="critical",                                                 help="Return warning if not matching")
    parser.add_argument("-c", "--critical",          action="store_true",  dest="critical",         default=True,                           help="Return critical if not matching (default)")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                          help="be more verbose")
    args = parser.parse_args()

    setcandebug(args.debug)

    result = checkgetent(args.database, args.key, args.value, args.partial)
    if result == True:
        sys.exit(0)
    else:
        if args.critical:
            sys.exit(2)
        else:
            sys.exit(1)

if __name__ == '__main__':
    main()
