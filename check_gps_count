#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import argparse
import gps
import time
import os
import sys

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def mapstatustoexitcode(status):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    return exitcode

def exitnagios(status,message):
    exitcode = mapstatustoexitcode(status)
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def dogpscountcall(timeout,warning,critical):
    gpsd = gps.gps(mode=gps.watch_options.WATCH_ENABLE|gps.watch_options.WATCH_NEWSTYLE)
    total_used = []
    total_seen = []
    try:
        start = time.time()
        while True:
            if gpsd.waiting():
                if gpsd.read():
                    report = gpsd.data
                    infomsg(report)
                    if report["class"] == "SKY":
                        total_used.append(gpsd.satellites_used)
                        total_seen.append(len(gpsd.satellites))
                        break
            if time.time() > start + timeout:
                #total_seen = len(gpsd.satellites)
                break
            else:
                time.sleep(1)
    except Exception as e:
        exitnagios("UNKNOWN","internal error - "+ str(e))
    finally:
        average_used = 0
        counter = 0
        while (counter<len(total_used)):
            average_used = average_used + total_used[counter]
            counter = counter+1
        if counter>0:
            average_used = average_used/counter
        
        average_seen = 0
        counter = 0
        while (counter<len(total_seen)):
            average_seen = average_seen + total_seen[counter]
            counter = counter+1
        if counter>0:
            average_seen = average_seen/counter
        
        message = "Total used: "+str(average_used)+" ; Total seen: "+str(average_seen)+" | used="+str(average_used)+" seen="+str(average_seen)
        if (average_used<=critical):
            exitnagios("CRITICAL",message)
        elif (average_used<=warning):
            exitnagios("WARNING",message)
        else:
            exitnagios("OK",message)

#-------------------------------------------------------------------------------

#collect arguments
def parse_args(forcedargs=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("-w", "--warning",           action="store",       type=int,                default=3,                                    help="if this number or less, it becomes warning state (default 3, 3D FIX requires 4)")
    parser.add_argument("-c", "--critical",          action="store",       type=int,                default=2,                                    help="if this number or less, it becomes critical state (default 2, 2D FIX requires 3)")
    parser.add_argument("-t", "--timeout",           action="store",       type=int,                default=90,                                   help="seconds to wait before timeout, default 90; SKY each min it should be over 60")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args(forcedargs)

    return args

def main(forcedargs=None):
    args = parse_args(forcedargs)
    setcandebug(args.debug)
    dogpscountcall(args.timeout,args.warning,args.critical)

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
