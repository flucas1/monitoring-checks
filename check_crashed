#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import argparse
import sys
import os
import subprocess
import datetime
import dateutil.parser
import time

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def mapstatustoexitcode(status):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    return exitcode

def exitnagios(status,message):
    exitcode = mapstatustoexitcode(status)
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def get_wtmp_entries():
    today = datetime.datetime.now(datetime.UTC)
    seven_days_ago = today - datetime.timedelta(days=7)
    formatted_date = seven_days_ago.strftime("%Y-%m-%d")
    infomsg(formatted_date)

    cmdline = ["/usr/bin/last","--system","--ip","--time-format=iso","--since="+formatted_date,"shutdown","reboot"]
    infomsg(" ".join(cmdline))
    completedproc = subprocess.run(cmdline,capture_output=True)
    output = completedproc.stdout.decode("utf-8").strip()
    errors = completedproc.stderr.decode("utf-8").strip()
    exitcode = completedproc.returncode
    infomsg("----------")
    infomsg(output)
    infomsg("----------")

    cleared = []
    if exitcode == 0:
        lines = output.splitlines()

        for line in lines:
            line = line.strip()
            if line=="":
                break
            elif (line.startswith("wtmp begins ") or line.startswith("/var/lib/wtmpdb/wtmp.db begins ")):
                break
            else:
                cleared.append(line)

    return cleared

def dolastloginscall(warning,critical):
    counter = 0
    retries = 10
    cleared = []
    while counter<retries:
        cleared = get_wtmp_entries()
        if len(cleared)>0:
            break
        else:
            counter = counter+1
            time.sleep(1)
            infomsg("sleeping and will do retry "+str(counter))
    infomsg(cleared)

    infomsg("----------")
    if len(cleared)>0:
        crashed = True
        crashdate = datetime.datetime.now(datetime.UTC)
        if len(cleared)>1:
            linecurrent = cleared[0].split()
            infomsg("linecurrent is "+str(linecurrent))
            lineprevious = cleared[1].split()
            infomsg("lineprevious is "+str(lineprevious))
            lasttext = lineprevious[len(lineprevious)-1]
            infomsg("evaluating text '"+lasttext+"'")
            if lasttext not in ["crash"]:
                crashed = False
            else:
                try:
                    crashdate = dateutil.parser.parse(linecurrent[4])
                except:
                    pass
        else:
            crashed = False

        if not crashed:
            exitnagios("OK","the system has not crashed recently | elapsed=-1")
        else:
            now = datetime.datetime.now() # no utc, to compare with local time
            elapsed = now.timestamp() - crashdate.timestamp()
            elapsedhours = int(elapsed // 3600)
            extraseconds = elapsed % 3600
            elapsedminutes = int(extraseconds // 60)
            elapsedseconds = int(extraseconds % 60)
            if elapsedhours<critical:
                exitnagios("CRITICAL","there was a crash "+str(elapsedhours)+"h "+str(elapsedminutes)+"m ago | elapsed="+str(elapsed))
            elif elapsedhours<warning:
                exitnagios("WARNING","there was a crash "+str(elapsedhours)+"h "+str(elapsedminutes)+"m ago | elapsed="+str(elapsed))
            else:
                exitnagios("OK","there was a crash, but it was "+str(elapsedhours)+"h "+str(elapsedminutes)+"m ago | elapsed="+str(elapsed))
    else:
        exitnagios("CRITICAL","issue retrieving last logins")

#-------------------------------------------------------------------------------

def main(forcedargs=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("-w", "--warning",                                 dest="warning",          default="48",                                 help="Warning level - hours")
    parser.add_argument("-c", "--critical",                                dest="critical",         default="96",                                 help="Critical level - hours")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args(forcedargs)

    setcandebug(args.debug)

    warning = int(args.warning)
    critical = int(args.critical)
    dolastloginscall(warning,critical)

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
