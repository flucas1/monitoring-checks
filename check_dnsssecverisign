#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import os
import sys
import time
import subprocess
import argparse

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver import ActionChains

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def generatedriver(proxy):
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--proxy-server="+proxy)

    chrome_service = webdriver.ChromeService(executable_path="/usr/bin/chromedriver")

    driver = webdriver.Chrome(options=chrome_options,service=chrome_service)
    #driver.implicitly_Wait(10, TimeUnit.SECONDS)

    return driver

def check_page_loaded(driver):
    #self.log.info("Checking if {} page is loaded.".format(self.driver.current_url))
    page_state = driver.execute_script('return document.readyState;')
    return page_state == 'complete'

def wait_page_loaded(driver):
    timestamp = time.time()
    while True:
        if check_page_loaded(driver) == True:
            break
        if time.time() - timestamp > 20:
            break

def tryfindbyxpath(driver,xpath):
    result = None
    try:
        result = driver.find_elements(By.XPATH, xpath)
    except:
        pass
    return result


#-------------------------------------------------------------------------------

def dodnssecverisigncall(domain,proxy,ignoremessages):
    try:
        driver = generatedriver(proxy)
        #driver.implicitly_Wait(10, TimeUnit.SECONDS)
        wait = WebDriverWait(driver,20)
        action=ActionChains(driver)

        infomsg("browser OK")
        url = "https://dnssec-analyzer.verisignlabs.com/"+domain
        driver.get(url)
        infomsg("asking for navigating "+url)

        time.sleep(5)
        wait_page_loaded(driver)
        infomsg("page loaded")

        infomsg("waiting for element")
        wait.until(EC.presence_of_element_located((By.XPATH, "//a[text()=\"â†“ Advanced options\"]")))

        infomsg("finding base element")
        tablepath = "//div[@class=\"header\"]//table[@class=\"T1\"]"
        element = driver.find_element(By.XPATH, tablepath)
        if element == None:
            exitnagios("CRITICAL","no result from page")

        redxpath = "//img[@src=\"/red.png\"]"
        yellowxpath = "//img[@src=\"/yellow.png\"]"

        redelements=tryfindbyxpath(driver, redxpath)
        if len(redelements)==0:
            exitnagios("CRITICAL","internal issue - red")
        yellowelements=tryfindbyxpath(driver, yellowxpath)
        if len(yellowelements)==0:
            exitnagios("CRITICAL","internal issue - yellow")

        validmsg = []

        redelements=tryfindbyxpath(driver, tablepath+redxpath)
        if len(redelements)>0:
            outputmsg = []
            for element in redelements:
                try:
                    textelement=tryfindbyxpath(element, "../following-sibling::td")[0]
                    msgtext = textelement.text.strip()
                    if msgtext != "":
                        if msgtext not in ignoremessages:
                            outputmsg.append(msgtext)
                        else:
                            validmsg.append(msgtext)
                except:
                    pass
            if len(outputmsg)>0:
                exitnagios("CRITICAL"," - ".join(outputmsg))

        yellowelements=tryfindbyxpath(driver, tablepath+yellowxpath)
        if len(yellowelements)>0:
            outputmsg = []
            for element in yellowelements:
                try:
                    textelement=tryfindbyxpath(element, "../following-sibling::td")[0]
                    msgtext = textelement.text.strip()
                    if msgtext != "":
                        if msgtext not in ignoremessages:
                            outputmsg.append(msgtext)
                        else:
                            validmsg.append(msgtext)
                except:
                    pass
            if len(outputmsg)>0:
                exitnagios("WARNING"," - ".join(outputmsg))

        if len(validmsg)>0:
            exitnagios("OK","all seems good - but matching ignores - "+" - ".join(validmsg))
        else:
            exitnagios("OK","all seems good")
    except Exception as e:
        exitnagios("CRITICAL","unexpected error during the check "+str(e))

#-------------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-H', '--host',                                 dest="host",          required=True,          help="Hostname")
    parser.add_argument("-e", "--expected",                             dest="expected",      default="false",        help="expected true/false")
    args = parser.parse_args()

    proxy = ""
    ignoremessages = []
    #ignoremessages.append("DS=44251/SHA-1 uses a deprecated digest algorithm")
    dodnssecverisigncall(args.host,proxy,ignoremessages)

if __name__ == '__main__':
    main()

#-------------------------------------------------------------------------------