#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import smtplib
import argparse
import sys
import time
import datetime
import socket
import ssl

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def dosmtpcheck(protocol,hostname,port,dossl,warning,critical,timeoutvalue,timeoutstatus,certificatedays,relay):
    try:
        start = datetime.datetime.now(datetime.UTC)
        smtpconnection = None
        #socket.setdefaulttimeout(timeoutvalue)
        if dossl==True:
            ctx = ssl.create_default_context()
            smtpconnection = smtplib.SMTP_SSL(host=hostname,port=port,timeout=timeoutvalue,context=ctx)
        else:
            smtpconnection = smtplib.SMTP(host=hostname,port=port,timeout=timeoutvalue)
    except socket.error as e:
        exitnagios(timeoutstatus,"socket error - "+str(e)+" | time=-1 validity=-1")

    if smtpconnection != None:
        certexpirationparsed = None
        if dossl==True:
            infomsg("doing SSL")
            certexpirationraw = None
            try:
                cert_data = smtpconnection.sock.getpeercert()
                infomsg(cert_data)
                certexpirationraw = cert_data["notAfter"]
                infomsg("Expiry date: "+str(certexpirationraw))
                if certexpirationraw != None:
                    from dateutil.parser import parse
                    certexpirationparsed = parse(cert_data["notAfter"])
            except:
                infomsg(str(traceback.format_exc()))
                pass

        smtpconnection.ehlo_or_helo_if_needed()
        response,message = smtpconnection.noop()
        # 220 after connection stablished, 250 after EHLO or HELO
        if response not in [200,250]:
            exitnagios("CRITICAL","initial check, unexpected state - "+str(response)+": "+message.decode()+" | time=-1 validity=-1")

        warningmsg= ""
        testemailaddress = "postmaster@google.com"
        response,message = smtpconnection.docmd("MAIL FROM:",testemailaddress)
        if response in [250]:
            response,message = smtpconnection.docmd("RCPT TO:",testemailaddress)
            infomsg(response)
            infomsg(message)
            if response in [250,251,354]:
                if relay != "open":
                    exitnagios("CRITICAL","found an open relay "+str(response)+", but it should be closed | time=-1 validity=-1")
            elif response in [550]:
                if relay != "closed":
                    exitnagios("CRITICAL","found an closed relay "+str(response)+", but it should be open | time=-1 validity=-1")
            warningmsg = "exitstaus "+str(response)+": "+message.decode()
        else:
            exitnagios("CRITICAL","sending test, unexpected state - "+str(response)+": "+message.decode()+" | time=-1 validity=-1")

        smtpconnection.quit()

        elapsed = datetime.datetime.now(datetime.UTC)-start
        duration = elapsed.total_seconds()
        daysremaining = -1
        if duration>=critical:
            exitnagios("CRITICAL", "it took "+str(duration)+ " seconds to answer | time="+str(duration)+" validity="+str(daysremaining))
        elif duration>=warning:
            exitnagios("WARNING", "it took "+str(duration)+ " seconds to answer | time="+str(duration)+" validity="+str(daysremaining))
        else:
            if dossl==True and certificatedays!="":
                if certexpirationparsed==None:
                    exitnagios("CRITICAL","cannot parse certificate expiration date '"+str(certexpirationraw)+"' | time="+str(duration)+" validity=0")
                else:
                    today = datetime.datetime.now(datetime.UTC)
                    timeremaining = certexpirationparsed.timestamp()-today.timestamp()
                    daysremaining = int(timeremaining/86400)

            if duration>=critical:
                exitnagios("CRITICAL", "it took "+str(duration)+ " seconds to answer | time="+str(duration)+" validity="+str(daysremaining))
            elif duration>=warning:
                exitnagios("WARNING", "it took "+str(duration)+ " seconds to answer | time="+str(duration)+" validity="+str(daysremaining))
            else:
                certificatedaysparts = certificatedays.split(",")
                criticaldays = int(certificatedaysparts[0])
                if len(certificatedaysparts)>1:
                    warningdays = int(certificatedaysparts[1])
                else:
                    warningdays = -1

                if daysremaining>=0 and daysremaining<criticaldays:
                    exitnagios("CRITICAL","the certificate is expiring in '"+str(daysremaining)+"' days | time="+str(duration)+" validity="+str(daysremaining))
                elif daysremaining>=0 and daysremaining<warningdays:
                    exitnagios("WARNING","the certificate is expiring in '"+str(daysremaining)+"' days | time="+str(duration)+" validity="+str(daysremaining))
                else:
                    exitnagios("OK", "it took "+str(duration)+ " seconds to answer | time="+str(duration)+" validity="+str(daysremaining))
    else:
        exitnagios("CRITICAL","cannot init SMTP connection | time=-1 validity=-1")

#-------------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-4", "--ipv4",              action="store_true",  dest="ipv4",             default=False,                          help="use ipv4 (default, exclusive with ipv6)")
    parser.add_argument("-6", "--ipv6",              action="store_true",  dest="ipv6",             default=False,                          help="use ipv6 (exclusive with ipv4)")
    parser.add_argument("-H", "--hostname",                                dest="hostname",         default="",                             help="server to check")
    parser.add_argument("-p", "--port",                                    dest="port",             default=25,                             help="port to use, usually 143 or 993")
    parser.add_argument("-w", "--warning",                                 dest="warning",          default=10,                             help="warning time (float)")
    parser.add_argument("-c", "--critical",                                dest="critical",         default=15,                             help="critical time (float)")
    parser.add_argument("-S", "--ssl",               action="store_true",  dest="ssl",              default=False,                          help="use ssl")
    parser.add_argument("-t", "--timeout",                                 dest="timeout",          default="30:CRITICAL",                  help="timeout value:STATUS")
    parser.add_argument("-C", "--certificatedays",                         dest="certificatedays",  default="5,20",                         help="minimum number of days a certificate has to be valid crit,warn")
    parser.add_argument("-r", "--relay",                                   dest="relay",            default="closed",                       help="open or closed relay")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                          help="be more verbose")
    args = parser.parse_args()

    setcandebug(args.debug)

    if (args.ipv4 == True) and (args.ipv6 == True):
        exitnagios("CRITICAL","choose ipv4 or ipv6, not both")
    if (args.ipv4 == False) and (args.ipv6 == False):
        args.ipv4 = True
    #infomsg(args.ipv4)
    #infomsg(args.ipv6)

    protocol = ""
    if args.ipv4 == True :
        protocol = "-4"
    elif args.ipv6 == True :
        protocol = "-6"

    if (args.hostname == ""):
        exitnagios("CRITICAL","hostname not defined")

    parts = args.timeout.split(":")
    timeoutvalue = int(parts[0])
    if len(parts)>1:
        timeoutstatus = parts[1]
    else:
        timeoutstatus = "CRITICAL"
    if timeoutstatus in ["OK", "WARNING", "CRITICAL", "UNKNOWN"]:
        dosmtpcheck(protocol,args.hostname,int(args.port),args.ssl,int(args.warning),int(args.critical),timeoutvalue,timeoutstatus,args.certificatedays,args.relay)
    else:
        exitnagios("CRITICAL","timeout status is not valid")

main()

#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------

