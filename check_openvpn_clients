#!/usr/bin/env python3
#-------------------------------------------------------------------------------

# other alternative can be .... as root  check /var/lib/openvpn/XXXXX.status
# there are different types, but only the ones allowing multiple clients (as server, and not 1-1 key)

import socket
import os
import pathlib
import re
import sys
import traceback
import time
import warnings
import argparse
import telnetlib3
import asyncio

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

class telnetconnection:
    def __init__(self, hostname, port, password, request):
        self.hostname=hostname
        self.port=port
        self.password=password
        self.request=request

    async def read_until(self, reader, expected, timeout=10):
        buffer = ""
        try:
            while expected not in buffer:
                #infomsg("1")
                chunk = await asyncio.wait_for(reader.read(1), timeout=timeout)
                #infomsg("2")
                if not chunk:
                    break
                #infomsg("3")
                buffer += chunk
                #infomsg("4")
        except asyncio.TimeoutError:
            infomsg(f"Timeout while waiting for: {expected}")
        return buffer

    async def interact(self):
        timeout = 5
        try:
            tnreader,tnwriter = await telnetlib3.open_connection(self.hostname, self.port)
            #infomsg("A")
            await self.read_until(tnreader, "ENTER PASSWORD:")
            #infomsg("B")
            tnwriter.write(self.password + "\r\n")
            #infomsg("C")
            await self.read_until(tnreader, "SUCCESS:")
            #infomsg("D")
            await self.read_until(tnreader, "-- type 'help' for more info" + "\r\n")
            #infomsg("E")
            tnwriter.write(self.request + "\r\n")
            #infomsg("F")
            response = await self.read_until(tnreader, "\r\n"+"END"+"\r\n")
            #infomsg("G")
            return response
        except Exception as e:
            exitnagios("CRITICAL",str(e))

#-------------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target",                                  dest="target",           default="",                                   help="target hostname"                           )
    parser.add_argument("-p", "--port",                                    dest="port",             default="",                                   help="port to use"                               )
    parser.add_argument("-w", "--warning",                                 dest="warning",          default="",                                   help="warning level"                             )
    parser.add_argument("-c", "--critical",                                dest="critical",         default="",                                   help="critical level"                            )
    parser.add_argument("-f", "--filecred",                                dest="filecred",         default="",                                   help="file containing the management credentials")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args()

    setcandebug(args.debug)

    if args.filecred == "":
        exitnagios("CRITICAL","filecred is not specified | clients=-1")
    else:
        filecontentslines=pathlib.Path(args.filecred).read_text().splitlines()
        password=filecontentslines[0]

    if args.target == "":
        exitnagios("CRITICAL","hostname is not specified | clients=-1")
    else:
        host = args.target
    if args.port == "":
        exitnagios("CRITICAL","port is not specified | clients=-1")
    else:
        port = int(args.port)

    telnetwrapper = telnetconnection(host, port, password, "status")
    data = asyncio.run(telnetwrapper.interact())
    infomsg(data)

    tab1 = re.findall("(.+),(\\d+\\.\\d+\\.\\d+\\.\\d+\\:\\d+),(\\d+),(\\d+),(.+)", data)
    tab2 = re.findall("(\\d+\\.\\d+\\.\\d+\\.\\d+),(.+),(\\d+\\.\\d+\\.\\d+\\.\\d+\\:\\d+),(.+)", data)

    num=int((len(tab1)+len(tab2))/2)

    if args.critical!="":
        if num>int(args.critical):
            exitnagios("CRITICAL","there are "+str(num)+" clients connected | clients="+str(num))
    if args.warning!="":
        if num>int(args.warning):
            exitnagios("WARNING","there are "+str(num)+" clients connected | clients="+str(num))

    exitnagios("OK","there are "+str(num)+" clients connected | clients="+str(num))

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
