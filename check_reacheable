#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import sys
import os
import argparse
import subprocess
import socket
import concurrent.futures

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

original_getaddrinfo = socket.getaddrinfo

def forced_ipv6_gai_family(*args, **kwargs):
    global original_getaddrinfo
    responses = original_getaddrinfo(*args, **kwargs)
    return [response
            for response in responses
            if response[0] == socket.AF_INET6]

def forced_ipv4_gai_family(*args, **kwargs):
    global original_getaddrinfo
    responses = original_getaddrinfo(*args, **kwargs)
    return [response
            for response in responses
            if response[0] == socket.AF_INET]

#-------------------------------------------------------------------------------

def dopingtestsingle(protocol, interface, packets, timeout, hostname, warningms, warningpercent, criticalms, criticalpercent):
    cmdline = ["/usr/bin/ping"]
    if protocol not in ["",None]:
        cmdline = cmdline + [protocol]
    if interface!="":
        cmdline = cmdline + ["-I", interface]
    cmdline = cmdline + ["-c", str(packets)]
    cmdline = cmdline + ["-W", str(1)]
    cmdline = cmdline + [hostname]
    infomsg(cmdline)
    try:
        completedproc = subprocess.run(cmdline,capture_output=True,timeout=timeout)
        output = completedproc.stdout.decode("utf-8")
        errors = completedproc.stderr.decode("utf-8")
        exitcode = completedproc.returncode
    except:
        output = ""
        errors = ""
        exitcode = 2

    infomsg(output)
    if exitcode!=0:
        return [2,-1,100,"error"]
    else:
        alllines = output.splitlines()
        linems = alllines[-1]
        linepercent = alllines[-2]
        avgms = float(linems.split("=")[1].strip().split()[0].split("/")[1])
        percent = float(linepercent.split(",")[2].strip().split()[0].replace("%",""))
        reason = "undefinded"
        if avgms >= criticalms:
            reason = "critical latency"
            infomsg(reason)
            return [2,avgms,percent,reason]
        elif percent >= criticalpercent:
            reason = "ciritical ping loss"
            infomsg(reason)
            return [2,avgms,percent,reason]
        elif avgms >= warningms:
            reason = "warning latency"
            infomsg(reason)
            return [1,avgms,percent,reason]
        elif percent >= warningpercent:
            reason = "warning ping loss"
            infomsg(reason)
            return [1,avgms,percent,reason]
        else:
            reason = "no issues"
            infomsg(reason)
            return [0,avgms,percent,reason]

def dopingtestmulti(protocol, interface, packets, timeoutvalue, timeoutstatus, hostname, minimun, warningms, warningpercent, criticalms, criticalpercent):
    hosts = hostname.replace(","," ").split()
    valid = 0
    warning = 0
    average = 0
    percentloss = 0
    okreasons = []
    warnreasons = []
    critreasons = []

    if protocol=="":
        protocolslist = ["-4","-6"]
    elif protocol=="-4":
        protocolslist = ["-4"]
    elif protocol=="-6":
        protocolslist = ["-6"]
    else:
        protocolslist = []

    executor = concurrent.futures.ThreadPoolExecutor()
    futures = []
    for hostsingle in hosts:
        for protocol in protocolslist:
            future = executor.submit(dopingtestsingle, protocol, interface, packets, timeoutvalue, hostsingle, warningms, warningpercent, criticalms, criticalpercent)
            futures.append(future)
    for future in concurrent.futures.as_completed(futures):
        result = future.result()
        if isinstance(result, list):
            average = average+result[1]
            percentloss = percentloss+result[2]
            reason = result[3]
            if result[0] == 0:
                valid = valid+1
                if reason not in okreasons:
                    okreasons.append(reason)
            elif result[0] == 1:
                warning = warning+1
                if reason not in warnreasons:
                    warnreasons.append(reason)
            else:
                if reason not in critreasons:
                    critreasons.append(reason)
        infomsg(result)

    average = float(average)/len(hosts)
    percentloss = float(percentloss)/len(hosts)
    percent = 100-percentloss
    valid = float(valid)/len(protocolslist)
    if valid >= minimun:
        exitnagios("OK",hostname+" - "+str(valid)+" of at lest "+str(minimun)+" entries are reacheable - "+str(okreasons)+" | valid="+str(valid)+" warning="+str(warning)+" average="+str(average)+" percent="+str(percent))
    elif valid+warning >= minimun:
        exitnagios("WARNING",hostname+" - "+str(valid)+" of at lest "+str(minimun)+" entries are reacheable - "+str(warnreasons)+" | valid="+str(valid)+" warning="+str(warning)+" average="+str(average)+" percent="+str(percent))
    else:
        exitnagios(timeoutstatus,hostname+" - only "+str(valid)+" of at least "+str(minimun)+" entries are reacheable - "+str(critreasons)+" | valid="+str(valid)+" warning="+str(warning)+" average=-1 percent=0")

#-------------------------------------------------------------------------------

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-4", "--ipv4",              action="store_true",  dest="ipv4",             default=False,                                help="use ipv4 (exclusive with ipv6)")
    parser.add_argument("-6", "--ipv6",              action="store_true",  dest="ipv6",             default=False,                                help="use ipv6 (exclusive with ipv4)")
    parser.add_argument("-0", "--ipv0",              action="store_true",  dest="ipv0",             default=False,                                help="do not specify ip protocol version")
    parser.add_argument("-H", "--hostname",          action="store",                                                                              help="target IP or hostname")
    parser.add_argument("-i", "--interface",         action="store",                                default="",                                   help="interface to use")
    parser.add_argument("-m", "--minimun",           action="store",       type=float,              default=0.5 ,                                 help="at least, how many targets should be alive")
    parser.add_argument("-p", "--packets",           action="store",       type=int,                default=1,                                    help="number of pings")
    parser.add_argument("-t", "--timeout",           action="store",                                default="10:CRITICAL",                        help="timeout value:STATUS")
    parser.add_argument("-w", "--warning",           action="store",                                default="500,20%",                            help="ms,percent%")
    parser.add_argument("-c", "--critical",          action="store",                                default="1000,40%",                           help="ms,percent%")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args()

    return args

def main():
    args = parse_args()

    setcandebug(args.debug)

    protocol = None
    exclist = 0
    if args.ipv0 == True :
        protocol = ""
        exclist = exclist+1
    if args.ipv4 == True :
        protocol = "-4"
        exclist = exclist+1
        socket.getaddrinfo = forced_ipv4_gai_family
    if args.ipv6 == True :
        protocol = "-6"
        exclist = exclist+1
        socket.getaddrinfo = forced_ipv6_gai_family
    if (exclist>1) :
        exitnagios("CRITICAL","select ip protocol version 4 or 6, or 0 to relay on OS handling")
    elif (exclist<1) :
        exitnagios("CRITICAL","no protocol selected")

    if (args.hostname == ""):
        exitnagios("CRITICAL","hostname not defined")

    timeoutparts = args.timeout.split(":")
    timeoutvalue = int(timeoutparts[0])
    timeoutstatus = "CRITICAL"
    if len(timeoutparts)>1:
        timeoutstatus = timeoutparts[1]

    warningparts = args.warning.split(",")
    warningms = int(float(warningparts[0]))
    warningpercent = int(float(warningparts[1].replace("%","")))
    criticalparts = args.critical.split(",")
    criticalms = int(float(criticalparts[0]))
    criticalpercent = int(float(criticalparts[1].replace("%","")))
    dopingtestmulti(protocol, args.interface, args.packets, timeoutvalue, timeoutstatus, args.hostname, args.minimun, warningms, warningpercent, criticalms, criticalpercent)

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------