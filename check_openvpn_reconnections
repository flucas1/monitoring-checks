#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import argparse
import sys
import os
import subprocess
import platform
import json

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def mapstatustoexitcode(status):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    return exitcode

def exitnagios(status,message):
    exitcode = mapstatustoexitcode(status)
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def openvpnreconnections_check(criticallevel, warninglevel, profile, time):
    cmdline = ["/usr/bin/journalctl","--utc","--no-pager","--unit","openvpn@"+profile,"-g","Started openvpn@","--since",str(time)+" hours ago"]
    infomsg(cmdline)
    completedproc = subprocess.run(cmdline,capture_output=True)
    output = completedproc.stdout.decode("utf-8").strip()
    errors = completedproc.stderr.decode("utf-8").strip()
    exitcode = completedproc.returncode

    infomsg(output)
    if exitcode==0:
        counter=0
        for line in output.splitlines():
            line = line.strip()
            infomsg(line)
            if line!="":
                if line.startswith("-- Boot ")==False:
                    counter = counter+1

        if criticallevel!="" and counter > int(criticallevel):
            exitnagios("CRITICAL",str(counter)+" reconnections | counter="+str(counter))
        elif warninglevel!="" and counter > int(warninglevel):
            exitnagios("WARNING",str(counter)+" reconnections | counter="+str(counter))
        else:
            exitnagios("OK","No reconnection activity found in journalctl | counter=1")
    else:
        if output=="-- No entries --":
            exitnagios("OK","No reconnection activity found in journalctl | counter=0")
        else:
            exitnagios("CRITICAL","error retrieving the information from journalctl | counter=1")

#-------------------------------------------------------------------------------

def main(forcedargs=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("-w", "--warning",                                                          default="12",                                 help="Number of occurences to trigger a warning")
    parser.add_argument("-c", "--critical",                                                         default="24",                                 help="Number of occurences to trigger a warning")
    parser.add_argument("-p", "--profile",                                 dest="profile",          default="",                                   help="Connection profile to check")
    parser.add_argument("-t", "--time",                                    dest="time",             default="24",                                 help="Duration in hours to verify")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args(forcedargs)

    setcandebug(args.debug)

    openvpnreconnections_check(args.critical, args.warning, args.profile, args.time)

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
