#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import paramiko
import time
import argparse
import os
import sys
import pathlib

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def doasusroutercall(host,username,password,timeoutvalue,command):
    result = None
    try:
        client = paramiko.client.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(host, username=username, password=password)
        _stdin, _stdout,_stderr = client.exec_command(command)
        result = _stdout.read().decode()
        client.close()
    except Exception as e:
        exitnagios("CRITICAL","unexpected error during the check "+str(e)+" | value=-1")

    return result

#-------------------------------------------------------------------------------

def check_status(value,warn_low,warn_high,crit_low,crit_high):
    if ((crit_low!=None) and (crit_high!=None)) and ((value<crit_low) or (value>crit_high)):
        exitnagios("CRITICAL","value "+str(value)+" is critical | value="+str(value))
    elif ((warn_low!=None) and (warn_high!=None)) and ((value<warn_low) or (value>warn_high)):
        exitnagios("WARNING","value "+str(value)+" is warning | value="+str(value))
    else:
        exitnagios("OK","value "+str(value)+" is as expected | value="+str(value))

#-------------------------------------------------------------------------------

def douptimecall(host,username,password,warn_low,warn_high,crit_low,crit_high,timeoutvalue,timeoutstatus):
    try:
        command = "awk '{print $1}' /proc/uptime"
        result = doasusroutercall(host,username,password,timeoutvalue,command)
        value = round(float(result))
    except:
        value = None
    #print(uptime,flush=True)
    if value!=None:
        check_status(value,warn_low,warn_high,crit_low,crit_high)
    else:
        exitnagios(timeoutstatus,"unable to retrieve the value | value=-1")

def domemorycall(host,username,password,warn_low,warn_high,crit_low,crit_high,timeoutvalue,timeoutstatus):
    try:
        command = "free"
        result = doasusroutercall(host,username,password,timeoutvalue,command)
        lines = result.splitlines()
        parts = lines[1].split()
        total = int(parts[1])
        used = int(parts[2])
        value = round((used/total)*100,2)
    except:
        value = None
    #print(uptime,flush=True)
    if value!=None:
        check_status(value,warn_low,warn_high,crit_low,crit_high)
    else:
        exitnagios(timeoutstatus,"unable to retrieve the value | value=-1")

def docpucall(host,username,password,warn_low,warn_high,crit_low,crit_high,timeoutvalue,timeoutstatus):
    try:
        command = "cat /proc/stat | grep cpu | tail -1 | awk '{print ($5*100)/($2+$3+$4+$5+$6+$7+$8+$9+$10)}' | awk '{print 100-$1}'"
        result = doasusroutercall(host,username,password,timeoutvalue,command)
        value = round(float(result),2)
    except:
        value = None
    #print(uptime,flush=True)
    if value!=None:
        check_status(value,warn_low,warn_high,crit_low,crit_high)
    else:
        exitnagios(timeoutstatus,"unable to retrieve the value | value=-1")

#-------------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-H", "--hostname",   dest="hostname",                         help="server to check")
    parser.add_argument("-t", "--timeout",    dest="timeout",   default="10:CRITICAL", help="timeout value:STATUS")
    parser.add_argument("-f", "--filecred",   dest="filecred",  default="",            help="file containing the management credentials")
    parser.add_argument("-m", "--mode",       dest="mode",      default="",            help="value to check")
    parser.add_argument("-w", "--warning",    dest="warning",   default="",            help="warning level %")
    parser.add_argument("-c", "--critical",   dest="critical",  default="",            help="critical level %")
    args = parser.parse_args()

    if args.hostname==None or args.hostname=="":
        exitnagios("CRITICAL","please specify a target hostname")

    if args.filecred == "":
        exitnagios("CRITICAL","filecred is not specified")
    elif args.mode not in ["uptime","memory","cpu"]:
        exitnagios("CRITICAL","mode must be uptime, memory, cpu")
    else:
        filecontentslines=pathlib.Path(args.filecred).read_text().splitlines()
        username=filecontentslines[0]
        password=filecontentslines[1]

    parts = args.timeout.split(":")
    timeoutvalue = int(parts[0])
    if len(parts)>1:
        timeoutstatus = parts[1]
    else:
        timeoutstatus = "CRITICAL"

    if args.warning != "":
        warnparts = args.warning.split(":")
        warn_low = int(warnparts[0])
        warn_high = int(warnparts[1])
    else:
        warn_low = None
        warn_high = None

    if args.critical != "":
        critparts = args.critical.split(":")
        crit_low = int(critparts[0])
        crit_high = int(critparts[1])
    else:
        crit_low = None
        crit_high = None

    if args.mode=="uptime":
        douptimecall(args.hostname,username,password,warn_low,warn_high,crit_low,crit_high,timeoutvalue,timeoutstatus)
    elif args.mode=="memory":
        domemorycall(args.hostname,username,password,warn_low,warn_high,crit_low,crit_high,timeoutvalue,timeoutstatus)
    elif args.mode=="cpu":
        docpucall(args.hostname,username,password,warn_low,warn_high,crit_low,crit_high,timeoutvalue,timeoutstatus)

    exitnagios("CRITICAL","unexpected case")

if __name__ == '__main__':
    main()

#-------------------------------------------------------------------------------
