#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import sys
import os
import argparse
import traceback
import datetime
import time
import ipaddress
import dns.query
import dns.resolver
import dns.exception

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def extractsearchlist():
    result = ""
    handle = None
    try:
        handle = open("/etc/resolv.conf","r")
        lines = handle.read().splitlines()
        for line in lines:
            line = line.strip().split("#",1)[0]
            if len(line)>0:
                parts = line.split()
                if parts[0]=="search":
                    result = parts[1].split()
                    break
    finally:
        if handle!=None:
            handle.close()
    return result

def extracthostslist():
    result = {}
    handle = None
    try:
        handle = open("/etc/hosts","r")
        lines = handle.read().splitlines()
        for line in lines:
            line = line.strip().split("#",1)[0]
            if len(line)>0:
                parts = line.split()
                key = parts[0]
                result[key] = parts[1:]
    finally:
        if handle!=None:
            handle.close()
    return result

def testvalue(ipo,dnsquery,recordtype,customresolver):
    result = False
    try:
        queryrr = customresolver.resolve(dnsquery,recordtype,search=False)
        infomsg(queryrr.rrset)
        if len(queryrr.rrset)>0:
            for rr in queryrr.rrset:
                foundip = ipaddress.ip_address(rr)
                #infomsg("--> "+str(foundip))
                #infomsg("--> "+str(ipo))
                if str(foundip) == str(ipo):
                    result = True
                    break
    except:
        infomsg("Error resolving "+dnsquery+" "+recordtype)
    return result

def testentry(ipo,canonical,aliases,searchlist,customresolver):
    result = True
    reason = None

    recordtype = None
    if ipo.version == 4:
        recordtype = "A"
    elif ipo.version == 6:
        recordtype = "AAAA"

    if testvalue(ipo,canonical,recordtype,customresolver):
        infomsg("Test value is True for "+str(ipo))
        for alias in aliases:
            if testvalue(ipo,alias,recordtype,customresolver)==False:
                foundusingsearch = False
                for search in searchlist:
                    if testvalue(ipo,alias+"."+search,recordtype,customresolver):
                        foundusingsearch = True
                        break
                infomsg(alias+" "+str(foundusingsearch))
                if foundusingsearch == False:
                    result = False
                    reason = "Entry not found"
                    break
    else:
        infomsg("Test value is False for "+str(ipo))
        result = False
        reason = "Error in DNS resolving of "+canonical

    return result,reason

def dohostsfilecheck():
    searchlist = extractsearchlist()
    hosts = extracthostslist()
    infomsg(searchlist)
    infomsg(hosts)

    allvalid = True
    failing = {}
    customresolver = dns.resolver.Resolver("/etc/resolv.conf")

    for key,value in hosts.items():
        ipo = ipaddress.ip_address(key)
        if (ipo.is_loopback==False) and (ipo.is_private or ipo.is_global) and (ipo.is_reserved==False) and (ipo.is_link_local==False) and (ipo.is_multicast==False):
            infomsg("Evaluating for "+str(ipo))
            canonical = value[0]
            aliases = value[1:]
            valid,reason = testentry(ipo,canonical,aliases,searchlist,customresolver)
            allvalid = allvalid and valid
            if not valid:
                failing[key] = [value,reason]

    if allvalid:
        exitnagios("OK","the hosts file seems valid")
    else:
        exitnagios("WARNING","some lines do not fully conform to specification or do not resolve properly "+str(failing))

#-------------------------------------------------------------------------------

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args()
    return args

def main():
    args = parse_args()
    setcandebug(args.debug)
    dohostsfilecheck()

main()

#-------------------------------------------------------------------------------
