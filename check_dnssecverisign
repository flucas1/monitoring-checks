#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import os
import sys
import time
import subprocess
import argparse

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver import ActionChains

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def generatedriver(proxy):
    chrome_options = Options()
    chrome_options.add_argument("--incognito")
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--in-process-gpu")
    chrome_options.add_argument("--use-gl=angle")
    chrome_options.add_argument("--use-angle=swiftshader-webgl")
    chrome_options.add_argument("--proxy-server="+proxy)

    chrome_service = webdriver.ChromeService(executable_path="/usr/bin/chromedriver")

    driver = webdriver.Chrome(options=chrome_options,service=chrome_service)
    #driver.implicitly_Wait(10, TimeUnit.SECONDS)

    return driver

def check_page_loaded(driver):
    #self.log.info("Checking if {} page is loaded.".format(self.driver.current_url))
    page_state = driver.execute_script("return document.readyState;")
    return page_state == "complete"

def wait_page_loaded(driver):
    timestamp = time.time()
    while True:
        if check_page_loaded(driver) == True:
            break
        if time.time() - timestamp > 20:
            break

#-------------------------------------------------------------------------------

def tryfindbyxpath(driver,xpath):
    result = None
    try:
        result = driver.find_elements(By.XPATH, xpath)
    except:
        pass
    return result

#-------------------------------------------------------------------------------

def count_red_yellow_green(block,ignoremessages):
    criticalmsg = []
    warningmsg = []
    okmsg = []
    ignoredmsg = []

    blocknameelement=tryfindbyxpath(block, "./td[@class=\"T1L\"]")
    if len(blocknameelement)>0:
        blocknametext=blocknameelement[0].text.strip()
    else:
        blocknametext=None
    infomsg("======> Block name text -> "+str(blocknametext))

    redxpath = ".//img[@src=\"/red.png\"]"
    redelements=tryfindbyxpath(block, redxpath)
    infomsg("Found "+str(len(redelements))+" red elements")
    if len(redelements)>0:
        for element in redelements:
            try:
                textelement=tryfindbyxpath(element, "../following-sibling::td")[0]
                msgtext = textelement.text.strip()
                if msgtext != "":
                    if msgtext not in ignoremessages:
                        criticalmsg.append(msgtext)
                    else:
                        ignoredmsg.append(msgtext)
            except Exception as e:
                infomsg("exception - "+str(e))

    yellowxpath = ".//img[@src=\"/yellow.png\"]"
    yellowelements=tryfindbyxpath(block, yellowxpath)
    infomsg("Found "+str(len(yellowelements))+" yellow elements")
    if len(yellowelements)>0:
        for element in yellowelements:
            try:
                textelement=tryfindbyxpath(element, "../following-sibling::td")[0]
                msgtext = textelement.text.strip()
                if msgtext != "":
                    if msgtext not in ignoremessages:
                        warningmsg.append(msgtext)
                    else:
                        ignoredmsg.append(msgtext)
            except Exception as e:
                infomsg("exception - "+str(e))

    greenxpath = ".//img[@src=\"/green.png\"]"
    greenelements=tryfindbyxpath(block, greenxpath)
    infomsg("Found "+str(len(greenelements))+" green elements")
    if len(greenelements)>0:
        for element in greenelements:
            try:
                textelement=tryfindbyxpath(element, "../following-sibling::td")[0]
                msgtext = textelement.text.strip()
                if msgtext != "":
                    if msgtext not in ignoremessages:
                        okmsg.append(msgtext)
                    else:
                        ignoredmsg.append(msgtext)
            except Exception as e:
                infomsg("exception - "+str(e))

    infomsg("critical -> "+str(criticalmsg))
    infomsg("warning -> "+str(warningmsg))
    infomsg("ok -> "+str(okmsg))
    infomsg("ignored -> "+str(ignoredmsg))
    return blocknametext,criticalmsg,warningmsg,okmsg,ignoredmsg

def dodnssecverisigncall(domain,proxy,tolerant,ignoremessages):
    try:
        driver = generatedriver(proxy)

        wait = WebDriverWait(driver,20)
        action=ActionChains(driver)

        infomsg("browser OK")
        url = "https://dnssec-analyzer.verisignlabs.com/"+domain
        driver.get(url)
        infomsg("asking for navigating "+url)

        time.sleep(5)
        wait_page_loaded(driver)
        infomsg("page loaded")

        infomsg("waiting for element")
        wait.until(EC.presence_of_element_located((By.XPATH, "//a[text()=\"↓ Advanced options\"]")))

        infomsg("finding base element")
        tablepath = "//div[@class=\"header\"]//table[@class=\"T1\"]"
        element = driver.find_element(By.XPATH, tablepath)
        if element == None:
            exitnagios("CRITICAL","no result from page")

        blocks = tryfindbyxpath(driver, tablepath+"/tbody/tr")
        infomsg("Found "+str(len(blocks)-1)+" blocks")

        criticalmsg = []
        warningmsg = []
        okmsg = []
        ignoredmsg = []
        for block in blocks[1:]:
            blocknametext,partcriticalmsg,partwarningmsg,partokmsg,partignoredmsg = count_red_yellow_green(block,ignoremessages)
            if blocknametext==domain:
                infomsg("This is a final zonename block")
                unreacheabletext = "No response from "+domain+" nameservers"
                if unreacheabletext in partcriticalmsg and tolerant:
                    partcriticalmsg.remove(unreacheabletext)
            criticalmsg=partcriticalmsg+criticalmsg
            warningmsg=partwarningmsg+warningmsg
            okmsg=partokmsg+okmsg
            ignoredmsg=partignoredmsg+ignoredmsg

        extra = []
        tempwarn = []
        if tolerant:
            for test in warningmsg:
                if (test.startswith("All Queries to ")==False) and (test.endswith(domain+"/SOA timed out or failed")==False):
                    tempwarn.append(test)
                else:
                    extra.append(test)
        warningmsg = tempwarn

        infomsg("final critical -> "+str(criticalmsg))
        infomsg("final warning -> "+str(warningmsg))
        infomsg("final ok -> "+str(okmsg))
        infomsg("final ignored -> "+str(ignoredmsg))

        if len(criticalmsg)>0:
            exitnagios("CRITICAL"," - ".join(criticalmsg))
        if len(warningmsg)>0:
            exitnagios("WARNING"," - ".join(warningmsg))

        if len(ignoredmsg)>0:
            exitnagios("OK","all seems good - but matching ignores - "+" - ".join(validmsg)+" - "+" ".join(extra))
        else:
            exitnagios("OK","all seems good - "+" ".join(extra))
    except Exception as e:
        exitnagios("CRITICAL","unexpected error during the check "+str(e))

#-------------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-H', '--host',                                    dest="host",                                                           help="Hostname")
    parser.add_argument("-e", "--expected",                                dest="expected",         default="false",                              help="expected true/false")
    parser.add_argument("-t", "--tolerant",          action="store_true",  dest="tolerant",         default=False,                                help="allow servers not responding")
    parser.add_argument("-®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args()

    setcandebug(args.debug)

    proxy = ""
    ignoremessages = []
    #ignoremessages.append("DS=44251/SHA-1 uses a deprecated digest algorithm")
    dodnssecverisigncall(args.host,proxy,args.tolerant,ignoremessages)

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------