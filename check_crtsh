#!/usr/bin/env python3
#-------------------------------------------------------------------------------

#https://crt.sh/?q=*.google.com&output=json
#and check that issuer+name and issuer_ca_id in list
#wget "https://crt.sh/?q=google.com&output=json" -O - -q | jq

import urllib.error
import urllib.request
import argparse
import sys
import os
import json
import datetime
import dateutil.parser
import time
import socket
import gzip
import zlib
import io
import random

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def mapstatustoexitcode(status):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    return exitcode

def exitnagios(status,message):
    exitcode = mapstatustoexitcode(status)
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

original_getaddrinfo = socket.getaddrinfo

def forced_ipv6_gai_family(*args, **kwargs):
    global original_getaddrinfo
    responses = original_getaddrinfo(*args, **kwargs)
    return [response
            for response in responses
            if response[0] == socket.AF_INET6]

def forced_ipv4_gai_family(*args, **kwargs):
    global original_getaddrinfo
    responses = original_getaddrinfo(*args, **kwargs)
    return [response
            for response in responses
            if response[0] == socket.AF_INET]

def ipv6_default_route_exists() -> bool:
    try:
        with open("/proc/net/ipv6_route") as f:
            for line in f:
                parts = line.split()
                # parts[0] = destination (32 hex chars), parts[1] = prefix length
                if parts[0] == "00000000000000000000000000000000" and parts[1] == "00" and parts[9] != "lo":
                    return True
        return False
    except FileNotFoundError:
        # /proc not available (non-Linux system)
        return False

def ipv4_default_route_exists() -> bool:
    try:
        with open("/proc/net/route") as f:
            next(f)  # skip header
            for line in f:
                parts = line.split()
                if parts[1] == "00000000" and parts[7] == "00000000":
                    return True
        return False
    except FileNotFoundError:
        return False

#-------------------------------------------------------------------------------

def load_json(proxy,domain,retries):
    #if args.exclude is True:
    #    ctx = ssl.create_default_context()
    #    ssl_handler = urllib.request.HTTPSHandler(context=ctx)
    #    ssl_opener = urllib.request.build_opener(ssl_handler)
    #    urllib.request.install_opener(ssl_opener)

    item_url = "https://crt.sh/?Identity="+domain+"&exclude=expired&output=json"
    infomsg(item_url)

    opener = None
    if proxy:
        if proxy.startswith("socks4://") or proxy.startswith("socks5://") or proxy.startswith("socks5h://"):
            parsed = urlparse(proxy)
            proxy_type = socks.SOCKS5
            if parsed.scheme == "socks4":
                proxy_type = socks.SOCKS4
            elif parsed.scheme in ("socks5", "socks5h"):
                proxy_type = socks.SOCKS5

            host = parsed.hostname
            port = parsed.port
            # Set default SOCKS proxy for all connections
            socks.set_default_proxy(proxy_type, host, port, rdns=(parsed.scheme=="socks5h"))
            socket.socket = socks.socksocket

            opener = urllib.request.build_opener()
        else:
            # HTTP/HTTPS proxy
            proxy_handler = urllib.request.ProxyHandler({
                "http": proxy,
                "https": proxy
            })
            opener = urllib.request.build_opener(proxy_handler)
    else:
        opener = urllib.request.build_opener()

    version = 139
    item_request = urllib.request.Request(item_url)
    item_request.add_header("Upgrade-Insecure-Requests", "1")
    item_request.add_header("Dnt", "1")
    item_request.add_header("Priority", "u=0,1")
    item_request.add_header("Cache-Control", "max-age=0")
    item_request.add_header("Accept-Language", "en-US")
    item_request.add_header("Accept-Encodinng", "gzip, deflate")
    item_request.add_header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7")
    item_request.add_header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/"+str(version)+".0.0.0 Safari/537.36")
    item_request.add_header("Sec-Ch-Ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\""+str(version)+"\", \"Chromium\";v=\""+str(version)+"\"")
    item_request.add_header("Sec-Ch-Ua-Mobile", "?0")
    item_request.add_header("Sec-Ch-Ua-Platform", "Windows")
    item_request.add_header("Sec-Fetch-Dest", "document")
    item_request.add_header("Sec-Fetch-Mode", "navigate")
    item_request.add_header("Sec-Fetch-Site", "none")
    item_request.add_header("Sec-Fetch-User", "?1")

    counter = 0
    object_json = None
    while True:
        try:
            counter = counter+1

            infomsg("sending request")
            response = opener.open(item_request, timeout=15)
            infomsg("request done")

            if response.getcode() == 429:
                infomsg("got 'HTTP 429 (Too Many Requests)'")
                object_json = None
                break
            else:
                encoding = response.headers.get("Content-Encoding")
                raw_data = response.read()
                if encoding == "gzip":
                    with gzip.GzipFile(fileobj=io.BytesIO(raw_data)) as gz:
                        decoded_data = gz.read().decode("utf-8")
                elif encoding == "deflate":
                    try:
                        decoded_data = zlib.decompress(raw_data).decode("utf-8")
                    except zlib.error:
                        # Some servers use raw deflate (no zlib headers)
                        decoded_data = zlib.decompress(raw_data, -zlib.MAX_WBITS).decode("utf-8")
                else:
                    decoded_data = raw_data.decode("utf-8")
                infomsg("decoding done")

                object_json = json.loads(decoded_data)
                count_json = len(object_json)
                #infomsg(object_json)
                infomsg("json done - items: "+str(count_json))

        except Exception as e:
            object_json = None
            message = str(e)
            infomsg("exception - "+message)
            if message.startswith("HTTP Error 429"):
                break
            elif message.startswith("HTTP Error "):
                parts = message.split(" ")
                rawerrorcode = parts[2].replace(":","")
                parsederrorcode = int(rawerrorcode)
                infomsg(parsederrorcode)
                infomsg("server error "+str(parsederrorcode))

        if object_json != None:
            break
        elif counter > retries:
            break
        else:
            time.sleep(5+(counter*2)+random.uniform(1, 5))

    return object_json

#-------------------------------------------------------------------------------

def docrtshcall(mode,proxy,hostname,validcas,ignorecerts,timeoutvalue,retries):

    mode=mode.lower()
    if mode=="ipv6":
        socket.getaddrinfo = forced_ipv6_gai_family
    elif mode=="ipv4":
        socket.getaddrinfo = forced_ipv4_gai_family
    elif mode==None:
        pass
    else:
        exitnagios("CRITICAL","invalid IP mode")

    hostnameparts = hostname.split(".")
    if "" in hostnameparts:
        hostnameparts.remove("")
    if len(hostnameparts)==2:
        hostnameparts.insert(0,"*")
    hostname = ".".join(hostnameparts)
    issuers = validcas.split(";")
    ignored = ignorecerts.split(";")

    start = datetime.datetime.now(datetime.UTC)
    parsed = load_json(proxy,hostname,retries)
    elapsed = datetime.datetime.now(datetime.UTC)-start
    duration = elapsed.total_seconds()
    if parsed != None:
        valid = True
        problems = []
        totalfound = len(parsed)
        for item in parsed:
            issuerid = str(item["issuer_ca_id"])
            certificateid = str(item["id"])
            if (issuerid not in issuers) and (certificateid not in ignored):
                rawnotafter = str(item["not_after"])
                parsednotafter = dateutil.parser.parse(rawnotafter)
                infomsg(parsednotafter)
                if parsednotafter >= datetime.datetime.now():
                    valid = False
                    problems.append(item)
                    infomsg(item)
        if totalfound==0:
            exitnagios("WARNING","no certificates in crt.sh | found="+str(totalfound)+" duration="+str(duration))
        elif valid==True:
            exitnagios("OK","no issues found | found="+str(totalfound)+" duration="+str(duration))
        else:
            exitnagios("CRITICAL","found problems --- "+str(problems)+" | found="+str(totalfound)+" duration="+str(duration))

    #do not fallback here, so several calls can be chained
    #exitnagios("WARNING","crt.sh does not answer properly")

#-------------------------------------------------------------------------------

def main(forcedargs=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("-H", "--hostname",                                dest="hostname",         default="",                                   help="domain to check")
    parser.add_argument("-v", "--valid",                                   dest="valid",            default="",                                   help="valid CA ids")
    parser.add_argument("-i", "--ignore",                                  dest="ignore",           default="",                                   help="ignore certificate ids")
    parser.add_argument("-t", "--timeout",                                 dest="timeout",          default="10:WARNING",                         help="timeout value:STATUS")
    parser.add_argument("-®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args(forcedargs)

    setcandebug(args.debug)

    if (args.hostname == ""):
        exitnagios("CRITICAL","hostname not defined")
    elif (args.valid == ""):
        exitnagios("CRITICAL","valid CA ids not defined")

    parts = args.timeout.split(":")
    timeoutvalue = int(parts[0])
    if len(parts)>1:
        timeoutstatus = parts[1]
    else:
        timeoutstatus = "WARNING"

    proxies = []

    start = datetime.datetime.now(datetime.UTC)
    time.sleep(random.uniform(1, 5))
    if ipv6_default_route_exists():
        infomsg("call ipv6")
        docrtshcall("ipv6",None,args.hostname,args.valid,args.ignore,timeoutvalue,5)
    if ipv4_default_route_exists():
        infomsg("call ipv4")
        docrtshcall("ipv4",None,args.hostname,args.valid,args.ignore,timeoutvalue,5)
    for proxy in proxies:
        infomsg("call "+str(proxy))
        docrtshcall(None,proxy,args.hostname,args.valid,args.ignore,timeoutvalue,5)
    elapsed = datetime.datetime.now(datetime.UTC)-start
    duration = elapsed.total_seconds()

    exitnagios(timeoutstatus,"cannot get crt.sh data | found=0 duration="+str(duration))

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
