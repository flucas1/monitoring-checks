#!/usr/bin/env python3
#-------------------------------------------------------------------------------
##aptitude install python-nagiosplugin

import argparse
import subprocess
import socket
import sys
import re

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def check_kcc():
    result = []
    command = ["/usr/bin/samba-tool", "drs", "kcc"]
    try:
        output = subprocess.check_output(command, stderr=subprocess.STDOUT).decode('utf-8')
    except subprocess.CalledProcessError:
        output = "Error during 'samba-tool drs kcc'."
        return False, output
    return True, output

def check_sysvol():
    result = []
    command = ["/usr/bin/samba-tool", "ntacl", "sysvolcheck"]
    try:
        output = subprocess.check_output(command, stderr=subprocess.STDOUT).decode('utf-8')
    except subprocess.CalledProcessError:
        output = "Error during 'samba-tool ntacl sysvolcheck'."
        return False, output
    return True, output


def main():
    exitcode = 0
    output = ""

    kcc_result, kcc_output = check_kcc()
    if kcc_result == False:
        exitcode = 2
        output += kcc_output+"\n"

    sysvol_result, sysvol_output = check_sysvol()
    if sysvol_result == False:
        exitcode = 2
        output += sysvol_output+"\n"

    if exitcode == 0:
        print('OK:','no issues detected in kcc nor sysvol', flush=True)
        sys.exit(0)
    else:
        print('CRITICAL:',output, flush=True)
        sys.exit(exitcode)


if __name__ == '__main__':
    main()
