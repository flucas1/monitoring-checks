#!/usr/bin/env python3
#-------------------------------------------------------------------------------
##aptitude install python-nagiosplugin

import argparse
import subprocess
import socket
import sys
import re

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def mapstatustoexitcode(status):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    return exitcode

def exitnagios(status,message):
    exitcode = mapstatustoexitcode(status)
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def check_kcc():
    result = []
    command = ["/usr/bin/samba-tool", "drs", "kcc"]
    try:
        output = subprocess.check_output(command, stderr=subprocess.STDOUT).decode()
    except subprocess.CalledProcessError:
        output = "Error during 'samba-tool drs kcc'"
        return False, output
    return True, output

def check_sysvol():
    result = []
    command = ["/usr/bin/samba-tool", "ntacl", "sysvolcheck"]
    try:
        output = subprocess.check_output(command, stderr=subprocess.STDOUT).decode()
    except subprocess.CalledProcessError:
        output = "Error during 'samba-tool ntacl sysvolcheck'"
        return False, output
    return True, output

#-------------------------------------------------------------------------------

def parse_args(forcedargs=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args(forcedargs)
    return args

def main(forcedargs=None):
    args = parse_args(forcedargs)
    
    setcandebug(args.debug)

    errors = 0
    output = ""

    kcc_result, kcc_output = check_kcc()
    if kcc_result == False:
        errors = errors+1
        output += kcc_output+"\n"

    sysvol_result, sysvol_output = check_sysvol()
    if sysvol_result == False:
        errors = errors+1
        output += sysvol_output+"\n"

    if errors == 0:
        exitnagios("OK","no issues detected in kcc nor sysvol")
    else:
        exitnagios("CRITICAL",output)

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
