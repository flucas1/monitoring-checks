#!/usr/bin/python3
#-------------------------------------------------------------------------------

import argparse
import sys
import re
import subprocess
import datetime
import socket
import time
import pathlib

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver import ActionChains

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def check_page_loaded(driver):
    #self.log.info("Checking if {} page is loaded.".format(self.driver.current_url))
    page_state = driver.execute_script('return document.readyState;')
    return page_state == 'complete'

def wait_page_loaded(driver):
    timestamp = time.time()
    while True:
        if check_page_loaded(driver) == True:
            break
        if time.time() - timestamp > 20:
            break

def dodevolouptimecall(password, warningmin, criticalmin, warningmax, criticalmax, hostname, timeoutvalue, timeoutstatus):
    driver = None
    ip = None

    try:
        ip = socket.gethostbyname(hostname)

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((ip,80))
        if result == 0:
            sock.close()
        else:
            sock.close()
            raise Exception("Cannot reach target IP on port 80 "+ip)
    except Exception as e:
        exitnagios(timeoutstatus,str(e))

    if ip != None:
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")

            chrome_service = webdriver.ChromeService(executable_path="/usr/bin/chromedriver")

            driver = webdriver.Chrome(options=chrome_options,service=chrome_service)
            #driver.implicitly_Wait(10, TimeUnit.SECONDS)
            wait = WebDriverWait(driver,20)
            action=ActionChains(driver)
        except Exception as e:
            exitnagios("CRITICAL",str(e))
    else:
        exitnagios("CRITICAL","The hostname "+hostname+" was not resolved")

    if driver!=None:
        try:
            infomsg("browser OK")

            url = "http://"+ip+"/#/login"
            driver.get(url)
            #time.sleep(5)
            wait_page_loaded(driver)

            infomsg("asking for logging "+url)
            wait.until(EC.visibility_of_element_located((By.ID, "product-name")))
            wait.until(EC.invisibility_of_element_located((By.ID, "spinner-container")))
            wait.until(EC.visibility_of_element_located((By.ID, "login-password")))
            wait.until(EC.visibility_of_element_located((By.ID, "btn-login")))

            elempassword = driver.find_element(By.ID, "login-password")
            infomsg(elempassword.get_attribute("outerHTML"))
            action.move_to_element(elempassword).perform()
            elempassword.click()
            #time.sleep(1)
            ##elempassword.clear()
            ##time.sleep(1)
            elempassword.send_keys(password)
            #time.sleep(2)

            login = driver.find_element(By.ID, "btn-login")
            infomsg(login.get_attribute("outerHTML"))
            action.move_to_element(login).perform()
            login.click()

            #time.sleep(5)
            wait_page_loaded(driver)
            wait.until(EC.visibility_of_element_located((By.ID, "overview-route-system-status")))

            infomsg("A")
            current_url = driver.current_url
            infomsg(current_url)
            if current_url == "http://"+ip+"/#/overview":
                infomsg("Logged In")
                pass
            else:
                raise Exception("error during log in "+current_url)
            infomsg("B")

            url = "http://"+ip+"/#/info/device"
            driver.get(url)
            #time.sleep(5)
            wait_page_loaded(driver)

            wait.until(EC.visibility_of_element_located((By.ID, "uptime")))
            wait.until(EC.text_to_be_present_in_element((By.ID, "uptime"), "day"))
            uptime = driver.find_element(By.ID, "uptime")
            infomsg(uptime.text)
            infomsg(uptime.get_attribute("outerHTML"))
            uptimeparts = uptime.text.strip().split(",")
            rawdays = uptimeparts[0].split()[0]
            if rawdays.lower()=="one":
                rawdays = "1"
            days = int(rawdays)
            uptimeblocks = uptimeparts[1].split(":")
            hours = int(uptimeblocks[0])
            minutes = int(uptimeblocks[1])
            seconds = int(uptimeblocks[2])
            uptime_sec = seconds+(minutes*60)+(hours*3600)+(days*86400)
            infomsg("uptime in seconds is "+str(uptime_sec))
            uptime_delta = datetime.timedelta(seconds=uptime_sec)
            fractionaldays = uptime_sec / (3600*24)

            if (criticalmin != "") and (uptime_sec < float(criticalmin)):
                exitnagios("CRITICAL","Uptime less than "+str(datetime.timedelta(seconds=float(criticalmin)))+" - currently "+str(uptime_delta)+" | uptime="+str(fractionaldays))
            elif (warningmin != "") and (uptime_sec < float(warningmin)):
                exitnagios("WARNING","Uptime less than "+str(datetime.timedelta(seconds=float(warningmin)))+" - currently "+str(uptime_delta)+" | uptime="+str(fractionaldays))
            elif (criticalmax != "") and (uptime_sec > float(criticalmax)):
                exitnagios("CRITICAL","Uptime more than "+str(datetime.timedelta(seconds=float(criticalmax)))+" - currently "+str(uptime_delta)+" | uptime="+str(fractionaldays))
            elif (warningmax != "") and (uptime_sec > float(warningmax)):
                exitnagios("WARNING","Uptime more than "+str(datetime.timedelta(seconds=float(warningmax)))+" - currently "+str(uptime_delta)+" | uptime="+str(fractionaldays))
            else:
                exitnagios("OK","The uptime is "+str(uptime_delta)+" | uptime="+str(fractionaldays))

        except Exception as e:
            exitnagios("CRITICAL",str(e))
    else:
        exitnagios("CRITICAL","the driver was not initialized")


#-------------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-4", "--ipv4",            action="store_true",  dest="ipv4",            default=False,         help="use ipv4 (default, exclusive with ipv6)")
    parser.add_argument("-6", "--ipv6",            action="store_true",  dest="ipv6",            default=False,         help="use ipv6 (exclusive with ipv4)")
    parser.add_argument("-H", "--hostname",                              dest="hostname",        default="",            help="server to check")
    parser.add_argument("-t", "--timeout",                               dest="timeout",         default="30:CRITICAL", help="timeout value:STATUS")
    parser.add_argument("-w", "--warning-min",                           dest="warningmin",      default="",            help="minimun value for a warning (seconds)")
    parser.add_argument("-c", "--critical-min",                          dest="criticalmin",     default="",            help="maximun value for a critical (seconds)")
    parser.add_argument("-W", "--warning-max",                           dest="warningmax",      default="",            help="minimun value for a warning (seconds)")
    parser.add_argument("-C", "--critical-max",                          dest="criticalmax",     default="",            help="maximun value for a critical (seconds)")
    parser.add_argument("-f", "--filecred",                              dest="filecred",        default="",            help="file containing the management credentials")
    args = parser.parse_args()

    if args.filecred == "":
        exitnagios("CRITICAL","filecred is not specified")
    else:
        filecontentslines=pathlib.Path(args.filecred).read_text().splitlines()
        password=filecontentslines[0]

    if args.hostname == "":
        exitnagios("CRITICAL","no hostname specified")

    parts = args.timeout.split(":")
    timeoutvalue = int(parts[0])
    if len(parts)>1:
        timeoutstatus = parts[1]
    else:
        timeoutstatus = "CRITICAL"
    if timeoutstatus in ["OK", "WARNING", "CRITICAL", "UNKNOWN"]:
        dodevolouptimecall(password,args.warningmin,args.criticalmin,args.warningmax,args.criticalmax,args.hostname,timeoutvalue,timeoutstatus)
    else:
        exitnagios("CRITICAL","timeout status is not valid")

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------

#timeout
#warning