#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import argparse
import sys
import os
import subprocess
import platform

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def candebug():
    global _candebug
    #return sys.stdout.isatty()
    if _candebug:
        return True
    else:
        return False

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

def mostseverestatus(current,candidate):
   if (current==""):
       return candidate
   if (current=="CRITICAL") or (candidate=="CRITICAL"):
       return "CRITICAL"
   elif (current=="WARNING") or (candidate=="WARNING"):
       return "WARNING"
   elif (current=="UNKNOWN") or (candidate=="UNKNOWN"):
       return "UNKOWN"
   elif (current=="OK") or (candidate=="OK"):
       return "OK"
   else:
       return "UNKNOWN"

#-------------------------------------------------------------------------------

def generic_compare_columns(kubeconfig,resource,columns):
    status = ""
    message = ""
    perf = ""

    try:
        cmdline = ["/usr/bin/kubectl","get",resource,"--all-namespaces","--kubeconfig",kubeconfig]
        completedproc = subprocess.run(cmdline,capture_output=True)
        output = completedproc.stdout.decode("utf-8").strip()
        errors = completedproc.stderr.decode("utf-8").strip()
        exitcode = completedproc.returncode

        if exitcode == 0:
            lines = output.splitlines()
            header = lines.pop(0)
            infomsg(header)
            haserror = False
            hasvalid = False
            counterrors = 0
            for line in lines:
                parts = line.split()
                infomsg(columns)
                identical = True
                reference = None
                for column in columns:
                    value = parts[column]
                    infomsg(value)
                    exploded = value.split("/")
                    infomsg(exploded)
                    for test in exploded:
                        infomsg(test)
                        if reference==None:
                            reference = test
                        elif test!=reference:
                            identical = False
                            infomsg("break")
                            break
                if identical == True:
                    hasvalid = True
                else:
                    haserror = True
                    counterrors = counterrors+1
            if hasvalid:
                if haserror:
                    status = "WARNING"
                    message = "some "+resource+" in error"
                else:
                    status = "OK"
            else:
                status = "CRITICAL"
                message = "all "+resource+" in error"
            perf = resource+"_total="+str(len(lines))+" "+resource+"_err="+str(counterrors)
        else:
            status = "CRITICAL"
            message = "issue contacting the kubernetes cluster"
            perf = resource+"_total=-1 "+resource+"_err=-1"
    except Exception as e:
        infomsg("there was an exception - "+str(e))
        status = "CRITICAL"
        message = "exception in "+resource
        perf = resource+"_total=-1 "+resource+"_err=-1"

    return status,message,perf

#-------------------------------------------------------------------------------

def test_kubernetes_version(kubeconfig):
    status = ""
    message = ""
    perf = ""

    try:
        cmdline = ["/usr/bin/kubectl","version","--kubeconfig",kubeconfig]
        completedproc = subprocess.run(cmdline,capture_output=True)
        output = completedproc.stdout.decode("utf-8").strip()
        errors = completedproc.stderr.decode("utf-8").strip()
        exitcode = completedproc.returncode

        if exitcode == 0:
            status = "OK"
            perf = "version="+output.split()[-1]
        else:
            status = "CRITICAL"
            message = "issue contacting the kubernetes cluster"
            perf = "version=-1"
    except Exception as e:
        infomsg("there was an exception - "+str(e))
        status = "CRITICAL"
        message = "exception in version"
        perf = "version=-1"

    return status,message,perf

def test_kubernetes_nodes(kubeconfig):
    status = ""
    message = ""
    perf = ""

    try:
        cmdline = ["/usr/bin/kubectl","get","nodes","--kubeconfig",kubeconfig]
        completedproc = subprocess.run(cmdline,capture_output=True)
        output = completedproc.stdout.decode("utf-8").strip()
        errors = completedproc.stderr.decode("utf-8").strip()
        exitcode = completedproc.returncode

        if exitcode == 0:
            lines = output.splitlines()
            header = lines.pop(0)
            haserror = False
            hasvalid = False
            counterrors = 0
            for line in lines:
                parts = line.split()
                if parts[1].lower() == "ready":
                    hasvalid = True
                else:
                    haserror = True
                    counterrors = counterrors+1
            if hasvalid:
                if haserror:
                    status = "WARNING"
                    message = "some nodes in error"
                else:
                    status = "OK"
            else:
                status = "CRITICAL"
                message = "all nodes in error"
            perf = "nodes_total="+str(len(lines))+" nodes_err="+str(counterrors)
        else:
            status = "CRITICAL"
            message = "issue contacting the kubernetes cluster"
            perf = "nodes_total=-1 nodes_err=-1"
    except Exception as e:
        infomsg("there was an exception - "+str(e))
        status = "CRITICAL"
        message = "exception in nodes"
        perf = "nodes_total=-1 nodes_err=-1"

    return status,message,perf

def test_kubernetes_pods(kubeconfig):
    status = ""
    message = ""
    perf = ""

    try:
        cmdline = ["/usr/bin/kubectl","get","pods","--all-namespaces","--kubeconfig",kubeconfig]
        completedproc = subprocess.run(cmdline,capture_output=True)
        output = completedproc.stdout.decode("utf-8").strip()
        errors = completedproc.stderr.decode("utf-8").strip()
        exitcode = completedproc.returncode

        if exitcode == 0:
            lines = output.splitlines()
            header = lines.pop(0)
            haserror = False
            hasvalid = False
            counterrors = 0
            for line in lines:
                parts = line.split()
                if parts[3].lower() == "running":
                    hasvalid = True
                else:
                    haserror = True
                    counterrors = counterrors+1
            if hasvalid:
                if haserror:
                    status = "WARNING"
                    message = "some pods in error"
                else:
                    status = "OK"
            else:
                status = "CRITICAL"
                message = "all pods in error"
            perf = "pods_total="+str(len(lines))+" pods_err="+str(counterrors)
        else:
            status = "CRITICAL"
            message = "issue contacting the kubernetes cluster"
            perf = "pods_total=-1 pods_err=-1"
    except Exception as e:
        infomsg("there was an exception - "+str(e))
        status = "CRITICAL"
        message = "exception in pods"
        perf = "pods_total=-1 pods_err=-1"

    return status,message,perf

def test_kubernetes_replicasets(kubeconfig):
    return generic_compare_columns(kubeconfig,"replicasets",[2,3,4])

#kubectl get statefulsets --no-headers --all-namespaces

def test_kubernetes_daemonsets(kubeconfig):
    return generic_compare_columns(kubeconfig,"daemonsets",[2,3,4,5,6])

def test_kubernetes_deployments(kubeconfig):
    return generic_compare_columns(kubeconfig,"deployments",[2,3,4])

#kubectl get persistentvolumeclaims --no-headers --all-namespaces
#kubectl get jobs --no-headers --all-namespaces
#kubectl get cronjobs --no-headers --all-namespaces

#-------------------------------------------------------------------------------

def dokubernetescall(kubeconfig):
    status = ""
    message = ""
    perf = ""

    infomsg("--- RUNNING STEP: 'version'")
    tempstatus,tempmessage,tempperf = test_kubernetes_version(kubeconfig)
    status = mostseverestatus(status,tempstatus)
    message = message.strip()+"\n"+tempmessage.strip()
    perf = perf.strip()+" "+tempperf.strip()

    infomsg("--- RUNNING STEP: 'nodes'")
    tempstatus,tempmessage,tempperf = test_kubernetes_nodes(kubeconfig)
    status = mostseverestatus(status,tempstatus)
    message = message.strip()+"\n"+tempmessage.strip()
    perf = perf.strip()+" "+tempperf.strip()

    infomsg("--- RUNNING STEP: 'pods'")
    tempstatus,tempmessage,tempperf = test_kubernetes_pods(kubeconfig)
    status = mostseverestatus(status,tempstatus)
    message = message.strip()+"\n"+tempmessage.strip()
    perf = perf.strip()+" "+tempperf.strip()

    infomsg("--- RUNNING STEP: 'replicasets'")
    tempstatus,tempmessage,tempperf = test_kubernetes_replicasets(kubeconfig)
    status = mostseverestatus(status,tempstatus)
    message = message.strip()+"\n"+tempmessage.strip()
    perf = perf.strip()+" "+tempperf.strip()

    infomsg("--- RUNNING STEP: 'daemonsets'")
    tempstatus,tempmessage,tempperf = test_kubernetes_daemonsets(kubeconfig)
    status = mostseverestatus(status,tempstatus)
    message = message.strip()+"\n"+tempmessage.strip()
    perf = perf.strip()+" "+tempperf.strip()

    infomsg("--- RUNNING STEP: 'deployments'")
    tempstatus,tempmessage,tempperf = test_kubernetes_deployments(kubeconfig)
    status = mostseverestatus(status,tempstatus)
    message = message.strip()+"\n"+tempmessage.strip()
    perf = perf.strip()+" "+tempperf.strip()

    if status=="OK":
        message="everything looks normal"
    message = message.strip().replace("\n"," - ")

    exitnagios(status,message+" | "+perf)

#-------------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-m", "--mode",              action="store",       dest="mode",             default="pipeline",                     help="choose one of: monitoring,pipeline"        )
    parser.add_argument("-k", "--kubeconfig",        action="store",       dest="kubeconfig",       default="/etc/kubernetes/admin.conf",   help="path to kubeconfig admin file"             )
    parser.add_argument("-®", "--debug",             action="store_true",  dest="debug",            default=False,                          help="be more verbose")
    args = parser.parse_args()

    setcandebug(args.debug)

    if args.mode.strip().lower() == "pipeline":
        setdebug(True)
    else:
        setdebug(False)

    kubeconfig = args.kubeconfig
    if os.path.isfile(kubeconfig):
        dokubernetescall(kubeconfig)
    else:
        exitnagios("CRITICAL","cannot find kubeconfig file '"+kubeconfig+"'")

if __name__ == '__main__':
    main()

#-------------------------------------------------------------------------------
