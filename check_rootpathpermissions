#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import argparse
import sys
import os

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def dorootpathpermissionscall():
    try:
        fullpath = "/"
        desired = oct(0o755)
        st = os.stat(fullpath)
        current = oct(st.st_mode & 0o777)
        if desired == current:
            exitnagios("OK", "the path '/' has permissions "+current+" as expected")
        else:
            exitnagios("WARNING", "the path '/' has permissions "+current+" but it was expected "+oct(desired))
    except Exception as e:
        exitnagios("CRITICAL","unexpected error during the check "+str(e))

#-------------------------------------------------------------------------------

def parse_args(forcedargs=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args(forcedargs)
    return args

def main(forcedargs=None):
    args = parse_args(forcedargs)
    setcandebug(args.debug)
    dorootpathpermissionscall()

#-------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
