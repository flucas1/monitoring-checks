#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import argparse
import sys
import os
import subprocess

#-------------------------------------------------------------------------------

_candebug = False
def candebug():
    global _candebug
    return _candebug
def setcandebug(value):
    global _candebug
    _candebug = value

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def doconnectionscall(warning,critical):
    cmdline = ["/usr/bin/ss","-s"]
    completedproc = subprocess.run(cmdline,capture_output=True)
    output = completedproc.stdout.decode("utf-8").strip()
    errors = completedproc.stderr.decode("utf-8").strip()
    exitcode = completedproc.returncode

    if exitcode == 0:
        lines = output.splitlines()
        if len(lines)>0:
            totalline = lines[0]
            parts = totalline.split()
            if len(parts)>1:
                totalconnections = int(parts[1])
                #print(totalconnections,flush=True)
                if (critical!=None) and (critical!="") and (totalconnections > int(critical)):
                    exitnagios("CRITICAL","there are too many connections - "+str(totalconnections)+" connections | connections="+str(totalconnections))
                elif (warning!=None) and (warning!="") and (totalconnections > int(warning)):
                    exitnagios("WARNING","there are too many connections - "+str(totalconnections)+" connections | connections="+str(totalconnections))
                else:
                    exitnagios("OK","no issues found - "+str(totalconnections)+" connections | connections="+str(totalconnections))

    exitnagios("CRITICAL","unexpected situation")

#-------------------------------------------------------------------------------

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--username", action="store", default="", dest="username", help="username to check")
    parser.add_argument("-w", "--warning",  action="store", default="", dest="warning",  help="warning hours")
    parser.add_argument("-c", "--critical", action="store", default="", dest="critical", help="critical hours")
    args = parser.parse_args()
    return args

def main():
    args = parse_args()
    doconnectionscall(args.warning,args.critical)

if __name__ == '__main__':
    main()

#-------------------------------------------------------------------------------
