#!/usr/bin/env python3
#-------------------------------------------------------------------------------

import argparse
import sys
import os
import subprocess

#-------------------------------------------------------------------------------

_candebug = False
def setcandebug(value):
    global _candebug
    _candebug = value
def candebug():
    global _candebug
    return _candebug

def infomsg(msg):
    if candebug() == True:
        print(msg, flush=True)

def exitnagios(status,message):
    if status=="OK":
        exitcode = 0
    elif status=="WARNING":
        exitcode = 1
    elif status=="CRITICAL":
        exitcode = 2
    elif status=="UNKNOWN":
        exitcode = 3
    else:
        exitcode = 4
    print(status+": "+message, flush=True)
    sys.exit(exitcode)

#-------------------------------------------------------------------------------

def doarpingcall(hostname):
    cmdline = ["/usr/sbin/ip","route","get",hostname]
    completedproc = subprocess.run(cmdline,capture_output=True)
    output = completedproc.stdout.decode("utf-8")
    errors = completedproc.stderr.decode("utf-8")
    response = completedproc.returncode
    infomsg(output)
    interface = None
    if response == 0:
        routeparts = output.split()
        if len(routeparts)>4:
            interface = routeparts[4]
    if interface == None:
        exitnagios("CRITICAL","Cannot identify iterface for discovery")
    infomsg("interface -> "+interface)

    cmdline = ["/usr/bin/ndisc6",hostname,interface]
    completedproc = subprocess.run(cmdline,capture_output=True)
    output = completedproc.stdout.decode("utf-8")
    errors = completedproc.stderr.decode("utf-8")
    response = completedproc.returncode
    infomsg(output)
    macfound = None
    if response == 0:
        alllines = output.splitlines()
        if len(alllines)>1:
            line = alllines[1]
            infomsg(line)
            parts = line.split()
            if len(parts)>3:
                macfound = parts[3]
                infomsg(macfound)

    if macfound!=None:
        exitnagios("OK",hostname+" is respoding to NDD with mac "+macfound)
    else:
        exitnagios("CRITICAL",hostname+" is not responding to NDD")

#-------------------------------------------------------------------------------

#collect arguments
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-H", "--hostname",          action="store",                                                                              help="target IP or hostname")
    parser.add_argument("-Â®", "--debug",             action="store_true",  dest="debug",            default=False,                                help="be more verbose")
    args = parser.parse_args()

    return args

def main():
    args = parse_args()
    setcandebug(args.debug)

    if not args.hostname:
        exitnagios("CRITICAL","Must give a hostname.")

    doarpingcall(args.hostname)

if __name__ == "__main__":
    main()

#-------------------------------------------------------------------------------
